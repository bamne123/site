"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[2287],{7643:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"leetcode/Easy/Find Pivot Index","title":"724 - Find Pivot Index","description":"Problem Information","source":"@site/docs/leetcode/Easy/724-Find Pivot Index.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Find Pivot Index","permalink":"/site/docs/leetcode/Easy/Find Pivot Index","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/724-Find Pivot Index.md","tags":[],"version":"current","sidebarPosition":724,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"448 - Find All Numbers Disappeared in an Array","permalink":"/site/docs/leetcode/Easy/Find All Numbers Disappeared in an Array"},"next":{"title":"977 - Squares of a Sorted Array","permalink":"/site/docs/leetcode/Easy/Squares of a Sorted Array"}}');var r=t(4848),s=t(8453),l=t(5537),a=t(9329);const o={},u="724 - Find Pivot Index",c={},d=[{value:"Problem Information",id:"problem-information",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Hints",id:"hints",level:3},{value:"Solution Approach",id:"solution-approach",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:3},{value:"Code Implementation",id:"code-implementation",level:3},{value:"Step-by-Step Explanation",id:"step-by-step-explanation",level:3},{value:"Related Problems",id:"related-problems",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"724---find-pivot-index",children:"724 - Find Pivot Index"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-information",children:"Problem Information"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Difficulty:"})," Easy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Category:"})," Array, Prefix Sum"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Link:"})," ",(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/find-pivot-index/",children:"LeetCode"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["Given an array of integers ",(0,r.jsx)(n.code,{children:"nums"}),", calculate the ",(0,r.jsx)(n.strong,{children:"pivot index"})," of this array."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"pivot index"})," is the index where the sum of all the numbers ",(0,r.jsx)(n.strong,{children:"strictly"})," to the left of the index is equal to the sum of all the numbers ",(0,r.jsx)(n.strong,{children:"strictly"})," to the index's right."]}),"\n",(0,r.jsxs)(n.p,{children:["If the index is on the left edge of the array, then the left sum is ",(0,r.jsx)(n.code,{children:"0"})," because there are no elements to the left. This also applies to the right edge of the array."]}),"\n",(0,r.jsxs)(n.p,{children:["Return ",(0,r.jsxs)(n.em,{children:["the ",(0,r.jsx)(n.strong,{children:"leftmost pivot index"})]}),". If no such index exists, return ",(0,r.jsx)(n.code,{children:"-1"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"hints",children:"Hints"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You could use a prefix sum approach."}),"\n",(0,r.jsx)(n.li,{children:"Think about how to calculate the sum of elements to the left and right of each index efficiently."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,r.jsx)(n.p,{children:"The problem can be solved efficiently using the prefix sum technique. We calculate the prefix sum of the array, which stores the sum of elements from index 0 to each subsequent index. Then, we iterate through the array, calculating the sum of elements to the right of each index as the difference between the total sum and the prefix sum at that index."}),"\n",(0,r.jsx)(n.p,{children:"We compare the left sum (0 for the first element) and the right sum, and if they are equal, we found the pivot index. We return the index if found, and -1 if no pivot index exists."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Video Explanation:"})}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/u89i60lYx8U",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,r.jsx)(n.h3,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Time Complexity:"})," O(n) - We iterate through the array once to calculate prefix sums and once to find the pivot index.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The calculation of prefix sums takes O(n) time."}),"\n",(0,r.jsx)(n.li,{children:"The iteration to find the pivot index also takes O(n) time."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Space Complexity:"})," O(n) - We need to store the prefix sums, which have the same size as the input array."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,r.jsxs)(l.A,{defaultValue:"python",groupId:"cody",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"Go",value:"go"},{label:"JavaScript",value:"javascript"}],children:[(0,r.jsx)(a.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def pivotIndex(nums):\n    prefix_sum = [0] * (len(nums) + 1)\n    for i in range(len(nums)):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n\n    for i in range(len(nums)):\n        left_sum = prefix_sum[i]\n        right_sum = prefix_sum[-1] - prefix_sum[i + 1]\n        if left_sum == right_sum:\n            return i\n    return -1\n"})})}),(0,r.jsx)(a.A,{value:"java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int pivotIndex(int[] nums) {\n        int[] prefixSum = new int[nums.length + 1];\n        for (int i = 0; i < nums.length; i++) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i];\n        }\n\n        for (int i = 0; i < nums.length; i++) {\n            int leftSum = prefixSum[i];\n            int rightSum = prefixSum[nums.length] - prefixSum[i + 1];\n            if (leftSum == rightSum) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"})})}),(0,r.jsx)(a.A,{value:"csharp",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"using System;\n\npublic class Solution {\n    public int PivotIndex(int[] nums) {\n        int[] prefixSum = new int[nums.Length + 1];\n        for (int i = 0; i < nums.Length; i++) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i];\n        }\n\n        for (int i = 0; i < nums.Length; i++) {\n            int leftSum = prefixSum[i];\n            int rightSum = prefixSum[nums.Length] - prefixSum[i + 1];\n            if (leftSum == rightSum) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"})})}),(0,r.jsx)(a.A,{value:"go",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func pivotIndex(nums []int) int {\n    prefixSum := make([]int, len(nums)+1)\n    for i := 0; i < len(nums); i++ {\n        prefixSum[i+1] = prefixSum[i] + nums[i]\n    }\n\n    for i := 0; i < len(nums); i++ {\n        leftSum := prefixSum[i]\n        rightSum := prefixSum[len(nums)] - prefixSum[i+1]\n        if leftSum == rightSum {\n            return i\n        }\n    }\n    return -1\n}\n"})})}),(0,r.jsx)(a.A,{value:"javascript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function pivotIndex(nums) {\n    const prefixSum = [];\n    prefixSum[0] = 0;\n    for (let i = 0; i < nums.length; i++) {\n        prefixSum[i + 1] = prefixSum[i] + nums[i];\n    }\n\n    for (let i = 0; i < nums.length; i++) {\n        const leftSum = prefixSum[i];\n        const rightSum = prefixSum[nums.length] - prefixSum[i + 1];\n        if (leftSum === rightSum) {\n            return i;\n        }\n    }\n    return -1;\n}\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"step-by-step-explanation",children:"Step-by-Step Explanation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Calculate Prefix Sums:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a ",(0,r.jsx)(n.code,{children:"prefixSum"})," array to store the cumulative sum of elements up to each index."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prefixSum[i]"})," will contain the sum of ",(0,r.jsx)(n.code,{children:"nums[0]"})," to ",(0,r.jsx)(n.code,{children:"nums[i-1]"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Initialize ",(0,r.jsx)(n.code,{children:"prefixSum[0]"})," to 0."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Iterate through the Array:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For each index ",(0,r.jsx)(n.code,{children:"i"})," in the ",(0,r.jsx)(n.code,{children:"nums"})," array:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Calculate the ",(0,r.jsx)(n.code,{children:"leftSum"})," as ",(0,r.jsx)(n.code,{children:"prefixSum[i]"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Calculate the ",(0,r.jsx)(n.code,{children:"rightSum"})," as the difference between the total sum (",(0,r.jsx)(n.code,{children:"prefixSum[nums.length]"}),") and the sum up to the next index (",(0,r.jsx)(n.code,{children:"prefixSum[i+1]"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compare Sums:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"leftSum"})," is equal to ",(0,r.jsx)(n.code,{children:"rightSum"}),", we have found the pivot index and return ",(0,r.jsx)(n.code,{children:"i"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return -1:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If no pivot index is found after iterating through the entire array, return ",(0,r.jsx)(n.code,{children:"-1"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-problems",children:"Related Problems"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/find-the-middle-index-in-array/",children:"Find the Middle Index in Array"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},9329:(e,n,t)=>{t.d(n,{A:()=>l});t(6540);var i=t(4164);const r={tabItem:"tabItem_Ymn6"};var s=t(4848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,l),hidden:t,children:n})}},5537:(e,n,t)=>{t.d(n,{A:()=>S});var i=t(6540),r=t(4164),s=t(5627),l=t(6347),a=t(372),o=t(604),u=t(1861),c=t(8749);function d(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:t}=e;const r=(0,l.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=h(e),[l,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:s}))),[u,d]=x({queryString:t,groupId:r}),[p,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,c.Dv)(t);return[r,(0,i.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),j=(()=>{const e=u??p;return m({value:e,tabValues:s})?e:null})();(0,a.A)((()=>{j&&o(j)}),[j]);return{selectedValue:l,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),f(e)}),[d,f,s]),tabValues:s}}var f=t(9136);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(4848);function b(e){let{className:n,block:t,selectedValue:i,selectValue:l,tabValues:a}=e;const o=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.a_)(),c=e=>{const n=e.currentTarget,t=o.indexOf(n),r=a[t].value;r!==i&&(u(n),l(r))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...s,className:(0,r.A)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function g(e){let{lazy:n,children:t,selectedValue:s}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function y(e){const n=p(e);return(0,v.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,v.jsx)(b,{...n,...e}),(0,v.jsx)(g,{...n,...e})]})}function S(e){const n=(0,f.A)();return(0,v.jsx)(y,{...e,children:d(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);