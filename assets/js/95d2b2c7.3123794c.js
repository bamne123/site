"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[5501],{1273:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"leetcode/Medium/Add Two Numbers","title":"Add Two Numbers","description":"Problem Information","source":"@site/docs/leetcode/Medium/2-Add Two Numbers.md","sourceDirName":"leetcode/Medium","slug":"/leetcode/Medium/Add Two Numbers","permalink":"/site/docs/leetcode/Medium/Add Two Numbers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Medium/2-Add Two Numbers.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Median of Two Sorted Arrays","permalink":"/site/docs/leetcode/Hard/Median of Two Sorted Arrays"},"next":{"title":"Longest Substring Without Repeating Characters","permalink":"/site/docs/leetcode/Medium/Longest Substring Without Repeating Characters"}}');var i=t(4848),r=t(8453),a=t(5537),s=t(9329);const o={},d="Add Two Numbers",u={},c=[{value:"Problem Information",id:"problem-information",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Examples",id:"examples",level:3},{value:"Constraints",id:"constraints",level:3},{value:"Hints",id:"hints",level:3},{value:"Solution Approach",id:"solution-approach",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:3},{value:"Code Implementation",id:"code-implementation",level:3},{value:"Step-by-Step Explanation",id:"step-by-step-explanation",level:3},{value:"Alternative Approaches",id:"alternative-approaches",level:2},{value:"Common Mistakes and Pitfalls",id:"common-mistakes-and-pitfalls",level:2},{value:"Related Problems",id:"related-problems",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"add-two-numbers",children:"Add Two Numbers"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-information",children:"Problem Information"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty:"})," Medium"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Category:"})," Linked List, Math, Recursion"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Link:"})," ",(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/add-two-numbers",children:"LeetCode"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsx)(n.p,{children:"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list."}),"\n",(0,i.jsx)(n.p,{children:"You may assume the two numbers do not contain any leading zero, except the number 0 itself."}),"\n",(0,i.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.p,{children:"Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807."}),"\n",(0,i.jsx)(n.h3,{id:"constraints",children:"Constraints"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The number of nodes in each linked list is in the range [1, 100]."}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 <= Node.val <= 9"})}),"\n",(0,i.jsx)(n.li,{children:"It is guaranteed that the list represents a number that does not have leading zeros."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"hints",children:"Hints"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Consider using a dummy head node to simplify the code."}),"\n",(0,i.jsx)(n.li,{children:"Keep track of the carry using one variable."}),"\n",(0,i.jsx)(n.li,{children:"Use a while loop to iterate until both lists are exhausted."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,i.jsx)(n.p,{children:"We can solve this problem by iterating through both linked lists simultaneously, adding the digits at each position, and keeping track of any carry. The result will be a new linked list representing the sum of the two numbers."}),"\n",(0,i.jsx)(n.h3,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(max(m, n))","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Where m and n are the lengths of the two linked lists. We iterate up to the length of the longer list."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Space Complexity:"})," O(max(m, n))","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The length of the new list is at most max(m, n) + 1."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,i.jsxs)(a.A,{defaultValue:"python",groupId:"cody",values:[{label:"python",value:"python"},{label:"javascript",value:"javascript"},{label:"go",value:"go"},{label:"java",value:"java"},{label:"csharp",value:"csharp"}],children:[(0,i.jsx)(s.A,{value:"python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        dummy_head = ListNode(0)\n        current = dummy_head\n        carry = 0\n\n        while l1 or l2 or carry:\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n\n            total = val1 + val2 + carry\n            carry = total // 10\n            digit = total % 10\n\n            current.next = ListNode(digit)\n            current = current.next\n\n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n\n        return dummy_head.next\n"})})}),(0,i.jsx)(s.A,{value:"javascript",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    let dummyHead = new ListNode(0);\n    let current = dummyHead;\n    let carry = 0;\n\n    while (l1 || l2 || carry) {\n        const val1 = l1 ? l1.val : 0;\n        const val2 = l2 ? l2.val : 0;\n\n        const sum = val1 + val2 + carry;\n        carry = Math.floor(sum / 10);\n        const digit = sum % 10;\n\n        current.next = new ListNode(digit);\n        current = current.next;\n\n        l1 = l1 ? l1.next : null;\n        l2 = l2 ? l2.next : null;\n    }\n\n    return dummyHead.next;\n};\n"})})}),(0,i.jsx)(s.A,{value:"go",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    dummyHead := &ListNode{Val: 0}\n    current := dummyHead\n    carry := 0\n\n    for l1 != nil || l2 != nil || carry > 0 {\n        val1 := 0\n        if l1 != nil {\n            val1 = l1.Val\n        }\n\n        val2 := 0\n        if l2 != nil {\n            val2 = l2.Val\n        }\n\n        sum := val1 + val2 + carry\n        carry = sum / 10\n        digit := sum % 10\n\n        current.Next = &ListNode{Val: digit}\n        current = current.Next\n\n        if l1 != nil {\n            l1 = l1.Next\n        }\n        if l2 != nil {\n            l2 = l2.Next\n        }\n    }\n\n    return dummyHead.Next\n}\n"})})}),(0,i.jsx)(s.A,{value:"java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummyHead = new ListNode(0);\n        ListNode current = dummyHead;\n        int carry = 0;\n\n        while (l1 != null || l2 != null || carry > 0) {\n            int val1 = (l1 != null) ? l1.val : 0;\n            int val2 = (l2 != null) ? l2.val : 0;\n\n            int sum = val1 + val2 + carry;\n            carry = sum / 10;\n            int digit = sum % 10;\n\n            current.next = new ListNode(digit);\n            current = current.next;\n\n            if (l1 != null) l1 = l1.next;\n            if (l2 != null) l2 = l2.next;\n        }\n\n        return dummyHead.next;\n    }\n}\n"})})}),(0,i.jsx)(s.A,{value:"csharp",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummyHead = new ListNode(0);\n        ListNode current = dummyHead;\n        int carry = 0;\n\n        while (l1 != null || l2 != null || carry > 0) {\n            int val1 = (l1 != null) ? l1.val : 0;\n            int val2 = (l2 != null) ? l2.val : 0;\n\n            int sum = val1 + val2 + carry;\n            carry = sum / 10;\n            int digit = sum % 10;\n\n            current.next = new ListNode(digit);\n            current = current.next;\n\n            if (l1 != null) l1 = l1.next;\n            if (l2 != null) l2 = l2.next;\n        }\n\n        return dummyHead.next;\n    }\n}\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"step-by-step-explanation",children:"Step-by-Step Explanation"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Initialize a dummy head node to simplify the handling of the first node in the result."}),"\n",(0,i.jsx)(n.li,{children:"Initialize a current pointer to the dummy head and a carry variable to 0."}),"\n",(0,i.jsx)(n.li,{children:"Iterate while either linked list has nodes or there is a carry."}),"\n",(0,i.jsx)(n.li,{children:"Get the values of the current nodes from both linked lists, defaulting to 0 if a list is exhausted."}),"\n",(0,i.jsx)(n.li,{children:"Calculate the sum of the two values and the carry."}),"\n",(0,i.jsx)(n.li,{children:"Update the carry by integer dividing the sum by 10."}),"\n",(0,i.jsx)(n.li,{children:"Calculate the digit by taking the sum modulo 10."}),"\n",(0,i.jsx)(n.li,{children:"Create a new node with the digit and append it to the result linked list."}),"\n",(0,i.jsx)(n.li,{children:"Move the current pointer to the new node."}),"\n",(0,i.jsx)(n.li,{children:"Move the pointers of the input linked lists to the next nodes, if they exist."}),"\n",(0,i.jsx)(n.li,{children:"Return the next node of the dummy head, which is the head of the result linked list."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"alternative-approaches",children:"Alternative Approaches"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Recursive Approach"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Time Complexity: O(max(m, n))"}),"\n",(0,i.jsx)(n.li,{children:"Space Complexity: O(max(m, n)) due to the call stack"}),"\n",(0,i.jsx)(n.li,{children:"Trade-offs: Can be more elegant but may cause stack overflow for very large lists."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"In-place Modification"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Time Complexity: O(max(m, n))"}),"\n",(0,i.jsx)(n.li,{children:"Space Complexity: O(1) if we can modify one of the input lists"}),"\n",(0,i.jsx)(n.li,{children:"Trade-offs: Modifies the input list; may not be desirable."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-mistakes-and-pitfalls",children:"Common Mistakes and Pitfalls"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Forgetting to handle the carry properly."}),"\n",(0,i.jsx)(n.li,{children:"Not considering the case where one list is longer than the other."}),"\n",(0,i.jsx)(n.li,{children:"Not handling the case where the sum of the last digits results in a carry, requiring an additional node in the result."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-problems",children:"Related Problems"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/multiply-strings",children:"Multiply Strings"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/add-binary",children:"Add Binary"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},9329:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var l=t(4164);const i={tabItem:"tabItem_Ymn6"};var r=t(4848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,l.A)(i.tabItem,a),hidden:t,children:n})}},5537:(e,n,t)=>{t.d(n,{A:()=>N});var l=t(6540),i=t(4164),r=t(5627),a=t(6347),s=t(372),o=t(604),d=t(1861),u=t(8749);function c(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,l.useMemo)((()=>{const e=n??function(e){return c(e).map((e=>{let{props:{value:n,label:t,attributes:l,default:i}}=e;return{value:n,label:t,attributes:l,default:i}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const i=(0,a.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(r),(0,l.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=h(e),[a,o]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const l=t.find((e=>e.default))??t[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:n,tabValues:r}))),[d,c]=p({queryString:t,groupId:i}),[x,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,u.Dv)(t);return[i,(0,l.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),v=(()=>{const e=d??x;return m({value:e,tabValues:r})?e:null})();(0,s.A)((()=>{v&&o(v)}),[v]);return{selectedValue:a,selectValue:(0,l.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),f(e)}),[c,f,r]),tabValues:r}}var f=t(9136);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(4848);function y(e){let{className:n,block:t,selectedValue:l,selectValue:a,tabValues:s}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.a_)(),u=e=>{const n=e.currentTarget,t=o.indexOf(n),i=s[t].value;i!==l&&(d(n),a(i))},c=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,ref:e=>{o.push(e)},onKeyDown:c,onClick:u,...r,className:(0,i.A)("tabs__item",v.tabItem,r?.className,{"tabs__item--active":l===n}),children:t??n},n)}))})}function g(e){let{lazy:n,children:t,selectedValue:r}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===r));return e?(0,l.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function j(e){const n=x(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",v.tabList),children:[(0,b.jsx)(y,{...n,...e}),(0,b.jsx)(g,{...n,...e})]})}function N(e){const n=(0,f.A)();return(0,b.jsx)(j,{...e,children:c(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var l=t(6540);const i={},r=l.createContext(i);function a(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);