"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[8599],{3962:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"leetcode/Medium/Container With Most Water","title":"Container With Most Water","description":"Container With Most Water","source":"@site/docs/leetcode/Medium/11-Container With Most Water.md","sourceDirName":"leetcode/Medium","slug":"/leetcode/Medium/Container With Most Water","permalink":"/site/docs/leetcode/Medium/Container With Most Water","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Medium/11-Container With Most Water.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"String to Integer (atoi)","permalink":"/site/docs/leetcode/Medium/String to Integer (atoi)"}}');var l=n(4848),r=n(8453);const o={},a=void 0,s={},c=[{value:"Container With Most Water",id:"container-with-most-water",level:2},{value:"Problem Statement",id:"problem-statement",level:3},{value:"Problem Details",id:"problem-details",level:3},{value:"Example",id:"example",level:3},{value:"Constraints",id:"constraints",level:3},{value:"Solution Approach",id:"solution-approach",level:3},{value:"Complexity Analysis",id:"complexity-analysis",level:3},{value:"Code Implementation",id:"code-implementation",level:3},{value:"Explanation",id:"explanation",level:3},{value:"Step-by-Step Explanation",id:"step-by-step-explanation",level:3},{value:"Alternative Approaches",id:"alternative-approaches",level:3},{value:"Common Mistakes and Pitfalls",id:"common-mistakes-and-pitfalls",level:3},{value:"Related Problems",id:"related-problems",level:3}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.h2,{id:"container-with-most-water",children:"Container With Most Water"}),"\n",(0,l.jsx)(t.h3,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,l.jsx)(t.p,{children:"Given two containers with non-empty water reservoirs, find the maximum water that can be transferred from one container to the other. The water level in each container can change over time."}),"\n",(0,l.jsx)(t.h3,{id:"problem-details",children:"Problem Details"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Input:"})," Two integers representing the minimum water capacity of each container (",(0,l.jsx)(t.code,{children:"input1"})," and ",(0,l.jsx)(t.code,{children:"input2"}),")"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Link:"})," ",(0,l.jsx)(t.a,{href:"https://leetcode.com/problems/container-with-most-water/",children:"Container With Most Water"})]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Companies:"})," [Known companies that frequently ask this problem]"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Tags:"})," [Two Pointers, Greedy]"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Difficulty:"})," Medium"]}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:["Input: ",(0,l.jsx)(t.code,{children:"input1 = 1"}),", ",(0,l.jsx)(t.code,{children:"input2 = 2"})]}),"\n",(0,l.jsxs)(t.li,{children:["Output: ",(0,l.jsx)(t.code,{children:"3"})]}),"\n",(0,l.jsx)(t.li,{children:"Explanation: The given water can be transferred from the first container to the second container."}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"constraints",children:"Constraints"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.code,{children:"1 <= input1, input2 <= 1000"})}),"\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.code,{children:"0 <= input1 + input2 <= 2 * 10^4"})}),"\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.code,{children:"0 <= input1 < input2"})}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Two Pointers Algorithm"}),": We will use two pointers, one from each container, to simulate the flow of water."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Fill the Container with Most Water"}),": We will keep track of the maximum water that can be transferred from the container with the larger water level."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Move the Pointer with Less Water"}),": We will move the pointer with the smaller water level towards the other container."]}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Time Complexity: O(min(input1, input2))"}),"\n",(0,l.jsx)(t.li,{children:"Space Complexity: O(1)"}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:"def maxWaterTransfer(input1, input2):\n    max_flow = 0\n    while True:\n        # Initialize the water flow\n        left, right = 0, 0\n        # Initialize the water level\n        water_left = min(input1, input2)\n        water_right = max(input1, input2)\n        while left <= water_left and right <= water_right:\n            # Calculate the water flow\n            flow = min(water_left, water_right) - left\n            if flow > 0:\n                max_flow += flow\n                left += flow\n            # Move the pointer with less water\n            if water_left > water_right:\n                left += 1\n            else:\n                right += 1\n        # Check if the maximum flow is reached\n        if left == water_left and right == water_right:\n            break\n    return max_flow\n"})}),"\n",(0,l.jsx)(t.h3,{id:"explanation",children:"Explanation"}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsx)(t.li,{children:"We start by initializing the maximum flow to 0."}),"\n",(0,l.jsx)(t.li,{children:"We enter a loop that continues until no more flow can be added."}),"\n",(0,l.jsx)(t.li,{children:"In each iteration, we initialize the water flow to 0."}),"\n",(0,l.jsx)(t.li,{children:"We move the pointer with the smaller water level towards the other container."}),"\n",(0,l.jsx)(t.li,{children:"We calculate the maximum flow that can be transferred from the container with the larger water level."}),"\n",(0,l.jsx)(t.li,{children:"We add this flow to the maximum flow and move the pointer with less water."}),"\n",(0,l.jsx)(t.li,{children:"We repeat steps 4-6 until no more flow can be added."}),"\n",(0,l.jsx)(t.li,{children:"We return the maximum flow."}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"step-by-step-explanation",children:"Step-by-Step Explanation"}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsxs)(t.li,{children:["Initialize ",(0,l.jsx)(t.code,{children:"max_flow"})," to 0 and the water flow variables to 0."]}),"\n",(0,l.jsx)(t.li,{children:"Move the pointer with the smaller water level towards the other container."}),"\n",(0,l.jsx)(t.li,{children:"Calculate the maximum flow that can be transferred from the container with the larger water level."}),"\n",(0,l.jsxs)(t.li,{children:["Add the flow to ",(0,l.jsx)(t.code,{children:"max_flow"})," and move the pointer with less water."]}),"\n",(0,l.jsx)(t.li,{children:"Repeat steps 3-4 until no more flow can be added."}),"\n",(0,l.jsxs)(t.li,{children:["Return ",(0,l.jsx)(t.code,{children:"max_flow"}),"."]}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"alternative-approaches",children:"Alternative Approaches"}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Two-Pointer Technique"}),": We can use two pointers to simulate the flow of water, but this approach requires additional space."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Bridging"}),": We can use bridging to transfer water from one container to the other, but this approach also requires additional space."]}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"common-mistakes-and-pitfalls",children:"Common Mistakes and Pitfalls"}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Incorrect Initialization"}),": We initialize ",(0,l.jsx)(t.code,{children:"max_flow"})," to 0 instead of the actual maximum flow."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Incorrect Calculation"}),": We calculate the maximum flow incorrectly."]}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"related-problems",children:"Related Problems"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.a,{href:"https://leetcode.com/problems/container-with-most-water-ii/",children:"Container With Most Water II"})}),"\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.a,{href:"https://leetcode.com/problems/container-with-most-water-iii/",children:"Container With Most Water III"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(6540);const l={},r=i.createContext(l);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);