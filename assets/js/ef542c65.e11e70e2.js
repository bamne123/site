"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[1119],{8137:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>h,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"leetcode/Medium/Longest Substring Without Repeating Characters","title":"Longest Substring Without Repeating Characters","description":"Longest Substring Without Repeating Characters","source":"@site/docs/leetcode/Medium/3-Longest Substring Without Repeating Characters.md","sourceDirName":"leetcode/Medium","slug":"/leetcode/Medium/Longest Substring Without Repeating Characters","permalink":"/site/docs/leetcode/Medium/Longest Substring Without Repeating Characters","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Medium/3-Longest Substring Without Repeating Characters.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Add Two Numbers","permalink":"/site/docs/leetcode/Medium/Add Two Numbers"},"next":{"title":"**Longest Palindromic Substring**","permalink":"/site/docs/leetcode/Medium/Longest Palindromic Substring"}}');var r=t(4848),s=t(8453);const h={},l=void 0,c={},o=[];function a(e){const n={a:"a",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Longest Substring Without Repeating Characters"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Problem Information:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Difficulty:"})," Medium"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Category:"})," Hash Table, String, Sliding Window"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Companies:"})," Known companies that frequently ask this"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Link:"})," ",(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/longest-substring-without-repeating-characters",children:"https://leetcode.com/problems/longest-substring-without-repeating-characters"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Companies:"})," [insert companies that frequently ask this problem]"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Problem Statement:"})}),"\n",(0,r.jsxs)(n.p,{children:["Given a string ",(0,r.jsx)(n.code,{children:"s"}),", find the length of the longest substring without repeating characters."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: s = "abcabcbb"\nOutput: 3\nExplanation: The longest substring without repeating characters is "abc".\n\nInput: s = "bbbbb"\nOutput: 1\nExplanation: The longest substring without repeating characters is "b".\n\nInput: s = "pwwkew"\nOutput: 3\nExplanation: The longest substring without repeating characters is "wke".\n\nInput: s = "leeeaaa"\nOutput: 5\nExplanation: The longest substring without repeating characters is "e".\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Time Complexity: O(s.length)"}),"\n",(0,r.jsx)(n.li,{children:"Space Complexity: O(s.length)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solution Approach:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Initialize two pointers, ",(0,r.jsx)(n.code,{children:"start"})," and ",(0,r.jsx)(n.code,{children:"end"}),", to the beginning of the string."]}),"\n",(0,r.jsxs)(n.li,{children:["Initialize a sliding window with two characters, ",(0,r.jsx)(n.code,{children:"left"})," and ",(0,r.jsx)(n.code,{children:"right"}),", to the first two characters of the window."]}),"\n",(0,r.jsxs)(n.li,{children:["While the current character is not in the window:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Move the ",(0,r.jsx)(n.code,{children:"right"})," pointer to the next character."]}),"\n",(0,r.jsxs)(n.li,{children:["If the next character is already in the window, move the ",(0,r.jsx)(n.code,{children:"left"})," pointer to the previous character."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Return the length of the longest substring without repeating characters."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def lengthOfLongestSubstring(s):\n    if not s:\n        return 0\n    \n    n = len(s)\n    max_length = 0\n    left = 0\n    char_set = set()\n    \n    for right in range(n):\n        while s[right] in char_set:\n            char_set.remove(s[left])\n            left += 1\n        char_set.add(s[right])\n        max_length = max(max_length, right - left + 1)\n    \n    return max_length\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step-by-Step Explanation:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Initialize two pointers, ",(0,r.jsx)(n.code,{children:"start"})," and ",(0,r.jsx)(n.code,{children:"end"}),", to the beginning of the string."]}),"\n",(0,r.jsxs)(n.li,{children:["Initialize a sliding window with two characters, ",(0,r.jsx)(n.code,{children:"left"})," and ",(0,r.jsx)(n.code,{children:"right"}),", to the first two characters of the window."]}),"\n",(0,r.jsx)(n.li,{children:"While the current character is not in the window:"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Move the ",(0,r.jsx)(n.code,{children:"right"})," pointer to the next character."]}),"\n",(0,r.jsxs)(n.li,{children:["If the next character is already in the window, move the ",(0,r.jsx)(n.code,{children:"left"})," pointer to the previous character."]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"Return the length of the longest substring without repeating characters."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Time Complexity:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The time complexity is O(n), where n is the length of the string."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Space Complexity:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The space complexity is O(s.length), where s is the input string."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Alternate Solution:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use a dictionary to store the characters and their indices."}),"\n",(0,r.jsxs)(n.li,{children:["Initialize two pointers, ",(0,r.jsx)(n.code,{children:"start"})," and ",(0,r.jsx)(n.code,{children:"end"}),", to the beginning of the string."]}),"\n",(0,r.jsxs)(n.li,{children:["Initialize a variable ",(0,r.jsx)(n.code,{children:"max_length"})," to 0."]}),"\n",(0,r.jsxs)(n.li,{children:["Iterate through the string:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["While the current character is not in the dictionary:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Move the ",(0,r.jsx)(n.code,{children:"end"})," pointer to the next character."]}),"\n",(0,r.jsxs)(n.li,{children:["If the next character is already in the dictionary, move the ",(0,r.jsx)(n.code,{children:"start"})," pointer to the previous character."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Update ",(0,r.jsx)(n.code,{children:"max_length"})," with the maximum length of the substring."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Return ",(0,r.jsx)(n.code,{children:"max_length"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def lengthOfLongestSubstring(s):\n    char_dict = {}\n    max_length = 0\n    left = 0\n    \n    for right in range(len(s)):\n        if s[right] in char_dict:\n            left = max(left, char_dict[s[right]] + 1)\n        char_dict[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    \n    return max_length\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step-by-Step Explanation:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Initialize a dictionary to store the characters and their indices."}),"\n",(0,r.jsxs)(n.li,{children:["Initialize two pointers, ",(0,r.jsx)(n.code,{children:"left"})," and ",(0,r.jsx)(n.code,{children:"right"}),", to the beginning of the string."]}),"\n",(0,r.jsxs)(n.li,{children:["Initialize a variable ",(0,r.jsx)(n.code,{children:"max_length"})," to 0."]}),"\n",(0,r.jsx)(n.li,{children:"Iterate through the string:"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["While the current character is not in the dictionary:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Move the ",(0,r.jsx)(n.code,{children:"right"})," pointer to the next character."]}),"\n",(0,r.jsxs)(n.li,{children:["If the next character is already in the dictionary, move the ",(0,r.jsx)(n.code,{children:"left"})," pointer to the previous character."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Update ",(0,r.jsx)(n.code,{children:"max_length"})," with the maximum length of the substring."]}),"\n",(0,r.jsxs)(n.li,{children:["Return ",(0,r.jsx)(n.code,{children:"max_length"}),"."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>h,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function h(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:h(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);