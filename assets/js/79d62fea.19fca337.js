"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[5907],{2531:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"leetcode/Easy/Intersection of Two Arrays II","title":"350 - Intersection of Two Arrays II","description":"Problem Information","source":"@site/docs/leetcode/Easy/350-Intersection of Two Arrays II.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Intersection of Two Arrays II","permalink":"/site/docs/leetcode/Easy/Intersection of Two Arrays II","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/350-Intersection of Two Arrays II.md","tags":[],"version":"current","sidebarPosition":350,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"349 - Intersection of Two Arrays","permalink":"/site/docs/leetcode/Easy/Intersection of Two Arrays"},"next":{"title":"448 - Find All Numbers Disappeared in an Array","permalink":"/site/docs/leetcode/Easy/Find All Numbers Disappeared in an Array"}}');var r=t(4848),a=t(8453),l=t(5537),i=t(9329);const o={},c="350 - Intersection of Two Arrays II",u={},h=[{value:"Problem Information",id:"problem-information",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Solution Approach",id:"solution-approach",level:2},{value:"Video Explanation",id:"video-explanation",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:3},{value:"Code Implementation",id:"code-implementation",level:3},{value:"Step-by-Step Explanation",id:"step-by-step-explanation",level:3},{value:"Alternative Approaches",id:"alternative-approaches",level:2},{value:"Common Mistakes and Pitfalls",id:"common-mistakes-and-pitfalls",level:2},{value:"Related Problems",id:"related-problems",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"350---intersection-of-two-arrays-ii",children:"350 - Intersection of Two Arrays II"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-information",children:"Problem Information"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Difficulty:"})," Easy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Category:"})," Array, Hash Table, Two Pointers, Binary Search, Sorting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Link:"})," ",(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/intersection-of-two-arrays-ii",children:"LeetCode"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["Given two integer arrays ",(0,r.jsx)("code",{children:"nums1"})," and ",(0,r.jsx)("code",{children:"nums2"}),", return ",(0,r.jsx)(n.em,{children:"an array of their intersection"}),". Each element in the result must appear as many times as it shows in both arrays and you may return the result in ",(0,r.jsx)(n.strong,{children:"any order"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= nums1.length, nums2.length <= 1000"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"0 <= nums1[i], nums2[i] <= 1000"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Follow up:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"What if the given array is already sorted? How would you optimize your algorithm?"}),"\n",(0,r.jsxs)(n.li,{children:["What if ",(0,r.jsx)("code",{children:"nums1"}),"'s size is small compared to ",(0,r.jsx)("code",{children:"nums2"}),"'s size? Which algorithm is better?"]}),"\n",(0,r.jsxs)(n.li,{children:["What if elements of ",(0,r.jsx)("code",{children:"nums2"})," are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,r.jsxs)(n.p,{children:["The problem can be solved efficiently using a hash table (or dictionary) to store the frequency of elements in ",(0,r.jsx)(n.code,{children:"nums1"}),". Then, iterate through ",(0,r.jsx)(n.code,{children:"nums2"}),", and for each element, check if it exists in the hash table and decrement its count. Finally, collect all elements with a count greater than 0."]}),"\n",(0,r.jsx)(n.h2,{id:"video-explanation",children:"Video Explanation"}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/XZ6ZL1Qg6og",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,r.jsx)(n.h3,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Time Complexity:"})," O(n + m) where n and m are the lengths of ",(0,r.jsx)(n.code,{children:"nums1"})," and ",(0,r.jsx)(n.code,{children:"nums2"})," respectively. We iterate through ",(0,r.jsx)(n.code,{children:"nums1"})," once to build the hash table and then through ",(0,r.jsx)(n.code,{children:"nums2"})," once to find the intersection."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Space Complexity:"})," O(n) in the worst case, where ",(0,r.jsx)(n.code,{children:"nums1"})," has unique elements. The hash table stores all elements from ",(0,r.jsx)(n.code,{children:"nums1"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,r.jsxs)(l.A,{defaultValue:"python",groupId:"cody",values:[{label:"Python",value:"python"},{label:"Javascript",value:"javascript"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"Go",value:"go"}],children:[(0,r.jsx)(i.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def intersect(nums1, nums2):\n    hash_map = {}\n    for num in nums1:\n        if num in hash_map:\n            hash_map[num] += 1\n        else:\n            hash_map[num] = 1\n    result = []\n    for num in nums2:\n        if num in hash_map and hash_map[num] > 0:\n            result.append(num)\n            hash_map[num] -= 1\n    return result\n"})})}),(0,r.jsx)(i.A,{value:"javascript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function intersect(nums1, nums2) {\n  const hashmap = {};\n  for (const num of nums1) {\n    if (num in hashmap) {\n      hashmap[num]++;\n    } else {\n      hashmap[num] = 1;\n    }\n  }\n  const result = [];\n  for (const num of nums2) {\n    if (num in hashmap && hashmap[num] > 0) {\n      result.push(num);\n      hashmap[num]--;\n    }\n  }\n  return result;\n}\n"})})}),(0,r.jsx)(i.A,{value:"java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int[] intersect(int[] nums1, int[] nums2) {\n        Map<Integer, Integer> hashmap = new HashMap<>();\n        for (int num : nums1) {\n            if (hashmap.containsKey(num)) {\n                hashmap.put(num, hashmap.get(num) + 1);\n            } else {\n                hashmap.put(num, 1);\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int num : nums2) {\n            if (hashmap.containsKey(num) && hashmap.get(num) > 0) {\n                result.add(num);\n                hashmap.put(num, hashmap.get(num) - 1);\n            }\n        }\n        int[] res = new int[result.size()];\n        for (int i = 0; i < result.size(); i++) {\n            res[i] = result.get(i);\n        }\n        return res;\n    }\n}\n"})})}),(0,r.jsx)(i.A,{value:"csharp",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"using System.Collections.Generic;\npublic class Solution {\n    public int[] Intersect(int[] nums1, int[] nums2) {\n        Dictionary<int, int> hashmap = new Dictionary<int, int>();\n        foreach (int num in nums1) {\n            if (hashmap.ContainsKey(num)) {\n                hashmap[num]++;\n            } else {\n                hashmap[num] = 1;\n            }\n        }\n        List<int> result = new List<int>();\n        foreach (int num in nums2) {\n            if (hashmap.ContainsKey(num) && hashmap[num] > 0) {\n                result.Add(num);\n                hashmap[num]--;\n            }\n        }\n        return result.ToArray();\n    }\n}\n"})})}),(0,r.jsx)(i.A,{value:"go",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func intersect(nums1 []int, nums2 []int) []int {\n    hashmap := make(map[int]int)\n    for _, num := range nums1 {\n        if _, ok := hashmap[num]; ok {\n            hashmap[num]++\n        } else {\n            hashmap[num] = 1\n        }\n    }\n    result := []int{}\n    for _, num := range nums2 {\n        if count, ok := hashmap[num]; ok && count > 0 {\n            result = append(result, num)\n            hashmap[num]--\n        }\n    }\n    return result\n}\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"step-by-step-explanation",children:"Step-by-Step Explanation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create a hash table:"})," Initialize an empty hash table (dictionary) to store the frequency of elements in ",(0,r.jsx)(n.code,{children:"nums1"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Populate the hash table:"})," Iterate through ",(0,r.jsx)(n.code,{children:"nums1"})," and for each element:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If the element is already in the hash table, increment its count."}),"\n",(0,r.jsx)(n.li,{children:"Otherwise, add the element to the hash table with a count of 1."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Iterate through ",(0,r.jsx)(n.code,{children:"nums2"}),":"]})," For each element in ",(0,r.jsx)(n.code,{children:"nums2"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check if the element exists in the hash table and its count is greater than 0."}),"\n",(0,r.jsxs)(n.li,{children:["If yes, append the element to the ",(0,r.jsx)(n.code,{children:"result"})," and decrement its count in the hash table."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return the result:"})," Return the ",(0,r.jsx)(n.code,{children:"result"})," array, which contains the intersection of ",(0,r.jsx)(n.code,{children:"nums1"})," and ",(0,r.jsx)(n.code,{children:"nums2"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"alternative-approaches",children:"Alternative Approaches"}),"\n",(0,r.jsx)(n.p,{children:"Not applicable for this specific problem."}),"\n",(0,r.jsx)(n.h2,{id:"common-mistakes-and-pitfalls",children:"Common Mistakes and Pitfalls"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not handling duplicate elements:"})," Make sure to handle duplicate elements correctly in both arrays."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Incorrectly updating hash table counts:"})," Ensure that you decrement the count in the hash table when an element is added to the ",(0,r.jsx)(n.code,{children:"result"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-problems",children:"Related Problems"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["[Intersection of Two Arrays] (",(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/intersection-of-two-arrays/",children:"https://leetcode.com/problems/intersection-of-two-arrays/"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["[Intersection of Two Arrays III] (",(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/intersection-of-two-arrays-iii/",children:"https://leetcode.com/problems/intersection-of-two-arrays-iii/"}),")"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},9329:(e,n,t)=>{t.d(n,{A:()=>l});t(6540);var s=t(4164);const r={tabItem:"tabItem_Ymn6"};var a=t(4848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,l),hidden:t,children:n})}},5537:(e,n,t)=>{t.d(n,{A:()=>I});var s=t(6540),r=t(4164),a=t(5627),l=t(6347),i=t(372),o=t(604),c=t(1861),u=t(8749);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:r}}=e;return{value:n,label:t,attributes:s,default:r}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const r=(0,l.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=d(e),[l,o]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a}))),[c,h]=p({queryString:t,groupId:r}),[f,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,u.Dv)(t);return[r,(0,s.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),j=(()=>{const e=c??f;return m({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{j&&o(j)}),[j]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),x(e)}),[h,x,a]),tabValues:a}}var x=t(9136);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(4848);function y(e){let{className:n,block:t,selectedValue:s,selectValue:l,tabValues:i}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),u=e=>{const n=e.currentTarget,t=o.indexOf(n),r=i[t].value;r!==s&&(c(n),l(r))},h=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{o.push(e)},onKeyDown:h,onClick:u,...a,className:(0,r.A)("tabs__item",j.tabItem,a?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function g(e){let{lazy:n,children:t,selectedValue:a}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function v(e){const n=f(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,b.jsx)(y,{...n,...e}),(0,b.jsx)(g,{...n,...e})]})}function I(e){const n=(0,x.A)();return(0,b.jsx)(v,{...e,children:h(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var s=t(6540);const r={},a=s.createContext(r);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);