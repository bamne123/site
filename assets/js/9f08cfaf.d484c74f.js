"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[448],{3642:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"leetcode/Medium/Add Two Numbers","title":"Add Two Numbers","description":"Problem Title: Add Two Numbers","source":"@site/docs/leetcode/Medium/Add Two Numbers.md","sourceDirName":"leetcode/Medium","slug":"/leetcode/Medium/Add Two Numbers","permalink":"/site/docs/leetcode/Medium/Add Two Numbers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Medium/Add Two Numbers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Problem Title: [Two Sum](https://leetcode.com/problems/two-sum)","permalink":"/site/docs/leetcode/Easy/Two Sum"}}');var o=t(4848),i=t(8453);const r={},l=void 0,d={},c=[{value:"Solution",id:"solution",level:2},{value:"Time &amp; Space Complexity",id:"time--space-complexity",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem Title:"})," ",(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/add-two-numbers",children:"Add Two Numbers"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Difficulty:"})," Medium"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Tags:"})," Linked List, Math, Recursion"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem Statement:"}),"\nYou are given two non-empty linked lists representing two non-negative integers. The digits in each linked list are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list."]}),"\n",(0,o.jsx)(n.p,{children:"Example 1:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342+265=607\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Explanation:"}),"\nTo solve this problem, we can use a dummy node to simplify the code. We iterate through both linked lists simultaneously, adding the corresponding nodes' values and keeping track of any carry-over value. If there is no next node in one of the lists, we add the carry value to the current node's value and return it as the result."]}),"\n",(0,o.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        # Create a dummy node to simplify the code\n        dummyHead = ListNode(0)\n        p = l1\n        q = l2\n        current = dummyHead\n        carry = 0\n        \n        while (p != None) or (q != None):\n            x = p.val if p != None else 0\n            y = q.val if q != None else 0\n            \n            sum = carry + x + y\n            carry = sum // 10\n            \n            current.next = ListNode(sum % 10)\n            current = current.next\n            \n            if p != None: p = p.next\n            if q != None: q = q.next\n        \n        # If there is still a carry value after iterating through both linked lists, add it to the result\n        if carry > 0:\n            current.next = ListNode(carry)\n        \n        return dummyHead.next\n"})}),"\n",(0,o.jsx)(n.h2,{id:"time--space-complexity",children:"Time & Space Complexity"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Time Complexity:"})," O(m + n), where m and n are the lengths of the input linked lists."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Space Complexity:"})," O(1), excluding the space required for the output linked list."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);