"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[8567],{8830:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"leetcode/Easy/Two Sum","title":"Two Sum","description":"Two Sum Problem","source":"@site/docs/leetcode/Easy/Two Sum.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Two Sum","permalink":"/site/docs/leetcode/Easy/Two Sum","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/Two Sum.md","tags":[],"version":"current","frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Welcome","permalink":"/site/docs/leetcode/sytem-design/intro"}}');var i=t(4848),o=t(8453);const r={},c=void 0,l={},d=[{value:"Problem Statement",id:"problem-statement",level:3},{value:"Solution",id:"solution",level:3},{value:"Explanation",id:"explanation",level:3},{value:"Time Complexity",id:"time-complexity",level:3},{value:"Space Complexity",id:"space-complexity",level:3},{value:"Example Use Cases",id:"example-use-cases",level:3},{value:"Notes",id:"notes",level:3}];function a(e){const n={code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Two Sum Problem"})}),"\n",(0,i.jsx)(n.h3,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["Given an array of integers and an integer ",(0,i.jsx)(n.code,{children:"target"}),", return indices of the two numbers such that they add up to ",(0,i.jsx)(n.code,{children:"target"}),". You may assume that each input would have exactly one solution, and you may not use the same element twice."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsxs)(n.p,{children:["Input: ",(0,i.jsx)(n.code,{children:"[2,7,11,15]"}),", ",(0,i.jsx)(n.code,{children:"target = 9"}),"\nOutput: ",(0,i.jsx)(n.code,{children:"[0,1]"})," (indices of 2 and 4 in the array)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsxs)(n.p,{children:["Input: ",(0,i.jsx)(n.code,{children:"[2,7,11,15]"}),", ",(0,i.jsx)(n.code,{children:"target = 5"}),"\nOutput: ",(0,i.jsx)(n.code,{children:"[0,1]"})," (indices of 0 and 0 in the array)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,i.jsxs)(n.p,{children:["Input: ",(0,i.jsx)(n.code,{children:"[2,7,11,15]"}),", ",(0,i.jsx)(n.code,{children:"target = 3"}),"\nOutput: ",(0,i.jsx)(n.code,{children:"[1,2]"})," (indices of 1 and 2 in the array)"]}),"\n",(0,i.jsx)(n.h3,{id:"solution",children:"Solution"}),"\n",(0,i.jsx)(n.p,{children:"Here's a Python solution that uses a HashMap to store the numbers we've seen so far and their indices:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def two_sum(nums, target):\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n"})}),"\n",(0,i.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["We start by creating an empty dictionary ",(0,i.jsx)(n.code,{children:"num_dict"})," to store the numbers we've seen so far and their indices."]}),"\n",(0,i.jsxs)(n.li,{children:["We iterate through the ",(0,i.jsx)(n.code,{children:"nums"})," array, and for each number ",(0,i.jsx)(n.code,{children:"num"}),", we calculate its complement ",(0,i.jsx)(n.code,{children:"complement = target - num"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["We check if ",(0,i.jsx)(n.code,{children:"complement"})," is already in ",(0,i.jsx)(n.code,{children:"num_dict"}),". If it is, it means we've found two numbers that add up to ",(0,i.jsx)(n.code,{children:"target"}),", so we return their indices."]}),"\n",(0,i.jsxs)(n.li,{children:["If ",(0,i.jsx)(n.code,{children:"complement"})," is not in ",(0,i.jsx)(n.code,{children:"num_dict"}),", we add ",(0,i.jsx)(n.code,{children:"num"})," and its index ",(0,i.jsx)(n.code,{children:"i"})," to ",(0,i.jsx)(n.code,{children:"num_dict"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["If we finish iterating through the array without finding two numbers that add up to ",(0,i.jsx)(n.code,{children:"target"}),", we return an empty list."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,i.jsxs)(n.p,{children:["The time complexity of this solution is O(n), where n is the length of the ",(0,i.jsx)(n.code,{children:"nums"})," array, because we're doing a constant amount of work for each element in the array."]}),"\n",(0,i.jsx)(n.h3,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,i.jsxs)(n.p,{children:["The space complexity of this solution is O(n), because in the worst case, we might need to store all elements of the ",(0,i.jsx)(n.code,{children:"nums"})," array in ",(0,i.jsx)(n.code,{children:"num_dict"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"example-use-cases",children:"Example Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"two_sum([2,7,11,15], 9)"})," returns ",(0,i.jsx)(n.code,{children:"[0,1]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"two_sum([2,7,11,15], 5)"})," returns ",(0,i.jsx)(n.code,{children:"[0,1]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"two_sum([2,7,11,15], 3)"})," returns ",(0,i.jsx)(n.code,{children:"[1,2]"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This solution has a time complexity of O(n) because we're doing a constant amount of work for each element in the array."}),"\n",(0,i.jsxs)(n.li,{children:["This solution has a space complexity of O(n) because in the worst case, we might need to store all elements of the ",(0,i.jsx)(n.code,{children:"nums"})," array in ",(0,i.jsx)(n.code,{children:"num_dict"}),"."]}),"\n",(0,i.jsx)(n.li,{children:'This solution assumes that there is exactly one solution to the problem. If there are multiple solutions, the problem is called "multi-partitive".'}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);