"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[5907],{2531:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"leetcode/Easy/Intersection of Two Arrays II","title":"350 - Intersection of Two Arrays II","description":"Problem Information","source":"@site/docs/leetcode/Easy/350-Intersection of Two Arrays II.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Intersection of Two Arrays II","permalink":"/site/docs/leetcode/Easy/Intersection of Two Arrays II","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/350-Intersection of Two Arrays II.md","tags":[],"version":"current","sidebarPosition":350,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"349 - Intersection of Two Arrays","permalink":"/site/docs/leetcode/Easy/Intersection of Two Arrays"},"next":{"title":"448 - Find All Numbers Disappeared in an Array","permalink":"/site/docs/leetcode/Easy/Find All Numbers Disappeared in an Array"}}');var r=t(4848),a=t(8453);t(5537),t(9329);const l={},i="350 - Intersection of Two Arrays II",o={},u=[{value:"Problem Information",id:"problem-information",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Examples",id:"examples",level:3},{value:"Constraints",id:"constraints",level:3},{value:"Solution Approach",id:"solution-approach",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:3},{value:"Code Implementation",id:"code-implementation",level:2},{value:"Step-by-Step Explanation",id:"step-by-step-explanation",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"350---intersection-of-two-arrays-ii",children:"350 - Intersection of Two Arrays II"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-information",children:"Problem Information"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Difficulty:"})," Easy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Category:"})," Array, Hash Table, Two Pointers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Link:"})," ",(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/intersection-of-two-arrays-ii",children:"LeetCode"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["Given two arrays, ",(0,r.jsx)(n.code,{children:"nums1"})," and ",(0,r.jsx)(n.code,{children:"nums2"}),", ",(0,r.jsx)(n.strong,{children:"both"})," of which contain unique integers,  return the intersection of these two arrays.  ",(0,r.jsx)(n.strong,{children:"The intersection"})," is the set of numbers that are common to both arrays."]}),"\n",(0,r.jsxs)(n.p,{children:["You may assume that the arrays were sorted in ascending order. It's guaranteed that each element in the arrays will not exceed 1000.  ",(0,r.jsx)(n.strong,{children:"The output array can be in any order."})]}),"\n",(0,r.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.p,{children:"Input: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]"}),"\n",(0,r.jsx)(n.h3,{id:"constraints",children:"Constraints"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= nums1.length, nums2.length <= 1000"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"-1000 <= nums1[i], nums2[i] <= 1000"})}),"\n",(0,r.jsx)(n.li,{children:"nums1 and nums2 contain no duplicate elements."}),"\n",(0,r.jsx)(n.li,{children:"nums1 and nums2 are sorted in a non-decreasing order."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,r.jsx)(n.p,{children:"We can use a hash table to efficiently find the intersection of the two arrays. Here's a breakdown of the approach:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Create a hash table:"})," Initialize an empty hash table to store the elements of ",(0,r.jsx)(n.code,{children:"nums1"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Populate the hash table:"})," Iterate through the elements of ",(0,r.jsx)(n.code,{children:"nums1"})," and add each element as a key in the hash table. The value associated with each key can be any arbitrary value (e.g., ",(0,r.jsx)(n.code,{children:"1"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Iterate through ",(0,r.jsx)(n.code,{children:"nums2"}),":"]})," Iterate through the elements of ",(0,r.jsx)(n.code,{children:"nums2"}),". For each element, check if it exists as a key in the hash table. If it does, add it to the result list."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Return the result list:"})," Return the list containing the intersection of the two arrays."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Time Complexity:"})," O(n + m), where n is the length of ",(0,r.jsx)(n.code,{children:"nums1"})," and m is the length of ",(0,r.jsx)(n.code,{children:"nums2"}),". We iterate through both arrays once."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Space Complexity:"})," O(n) in the worst case, as we store all elements of ",(0,r.jsx)(n.code,{children:"nums1"})," in the hash table."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def intersect(nums1, nums2):\n    hash_table = {}\n    result = []\n    for num in nums1:\n        if num not in hash_table:\n            hash_table[num] = 1\n    for num in nums2:\n        if num in hash_table:\n            result.append(num)\n            hash_table[num] = 0\n    return result\n\n\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function intersect(nums1, nums2) {\n    const hashTable = {};\n    const result = [];\n    for (const num of nums1) {\n        if (num in hashTable) {\n            hashTable[num]++;\n        } else {\n            hashTable[num] = 1;\n        }\n    }\n    for (const num of nums2) {\n        if (num in hashTable && hashTable[num] > 0) {\n            result.push(num);\n            hashTable[num]--;\n        }\n    }\n    return result;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func intersect(nums1 []int, nums2 []int) []int {\n    hashTable := make(map[int]int)\n    result := []int{}\n    for _, num := range nums1 {\n        if _, ok := hashTable[num]; !ok {\n            hashTable[num] = 1\n        } else {\n            hashTable[num]++\n        }\n    }\n    for _, num := range nums2 {\n        if _, ok := hashTable[num]; ok && hashTable[num] > 0 {\n            result = append(result, num)\n            hashTable[num]--\n        }\n    }\n    return result\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int[] intersect(int[] nums1, int[] nums2) {\n        Map<Integer, Integer> hashTable = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (int num : nums1) {\n            if (hashTable.containsKey(num)) {\n                hashTable.put(num, hashTable.get(num) + 1);\n            } else {\n                hashTable.put(num, 1);\n            }\n        }\n        for (int num : nums2) {\n            if (hashTable.containsKey(num) && hashTable.get(num) > 0) {\n                result.add(num);\n                hashTable.put(num, hashTable.get(num) - 1);\n            }\n        }\n        return result.stream().mapToInt(Integer::intValue).toArray();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public int[] Intersect(int[] nums1, int[] nums2) {\n    Dictionary<int, int> hashTable = new Dictionary<int, int>();\n    List<int> result = new List<int>();\n    foreach (int num in nums1) {\n        if (hashTable.ContainsKey(num)) {\n            hashTable[num]++;\n        } else {\n            hashTable[num] = 1;\n        }\n    }\n    foreach (int num in nums2) {\n        if (hashTable.ContainsKey(num) && hashTable[num] > 0) {\n            result.Add(num);\n            hashTable[num]--;\n        }\n    }\n    return result.ToArray();\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-by-step-explanation",children:"Step-by-Step Explanation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create a hash table:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This hash table will store the elements of ",(0,r.jsx)(n.code,{children:"nums1"})," as keys, and we can use ",(0,r.jsx)(n.code,{children:"1"})," as the value for each key."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Populate the hash table:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Iterate through each element in ",(0,r.jsx)(n.code,{children:"nums1"})," and add it as a key in the hash table. If the element already exists in the hash table, increment its value."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Iterate through ",(0,r.jsx)(n.code,{children:"nums2"}),":"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For each element in ",(0,r.jsx)(n.code,{children:"nums2"}),", check if it exists as a key in the hash table."]}),"\n",(0,r.jsxs)(n.li,{children:["If it exists and its value is greater than 0, it means the element is present in both arrays. Add it to the ",(0,r.jsx)(n.code,{children:"result"})," list and decrement its value in the hash table to avoid duplicates."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return the result list:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"result"})," list will contain the intersection of the two arrays."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},9329:(e,n,t)=>{t.d(n,{A:()=>l});t(6540);var s=t(4164);const r={tabItem:"tabItem_Ymn6"};var a=t(4848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,l),hidden:t,children:n})}},5537:(e,n,t)=>{t.d(n,{A:()=>I});var s=t(6540),r=t(4164),a=t(5627),l=t(6347),i=t(372),o=t(604),u=t(1861),c=t(8749);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:r}}=e;return{value:n,label:t,attributes:s,default:r}}))}(t);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const r=(0,l.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=d(e),[l,o]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a}))),[u,h]=p({queryString:t,groupId:r}),[b,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,c.Dv)(t);return[r,(0,s.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),x=(()=>{const e=u??b;return m({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{x&&o(x)}),[x]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),f(e)}),[h,f,a]),tabValues:a}}var f=t(9136);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(4848);function y(e){let{className:n,block:t,selectedValue:s,selectValue:l,tabValues:i}=e;const o=[],{blockElementScrollPositionUntilNextRender:u}=(0,a.a_)(),c=e=>{const n=e.currentTarget,t=o.indexOf(n),r=i[t].value;r!==s&&(u(n),l(r))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{o.push(e)},onKeyDown:h,onClick:c,...a,className:(0,r.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function g(e){let{lazy:n,children:t,selectedValue:a}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function v(e){const n=b(e);return(0,j.jsxs)("div",{className:(0,r.A)("tabs-container",x.tabList),children:[(0,j.jsx)(y,{...n,...e}),(0,j.jsx)(g,{...n,...e})]})}function I(e){const n=(0,f.A)();return(0,j.jsx)(v,{...e,children:h(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var s=t(6540);const r={},a=s.createContext(r);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);