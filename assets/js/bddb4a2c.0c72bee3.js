"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[8567],{8830:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"leetcode/Easy/Two Sum","title":"Problem Title: [Two Sum](https://leetcode.com/problems/two-sum)","description":"Difficulty: Easy","source":"@site/docs/leetcode/Easy/Two Sum.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Two Sum","permalink":"/site/docs/leetcode/Easy/Two Sum","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/Two Sum.md","tags":[],"version":"current","frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Welcome","permalink":"/site/docs/leetcode/intro"},"next":{"title":"Add Two Numbers","permalink":"/site/docs/leetcode/Medium/Add Two Numbers"}}');var i=n(4848),s=n(8453);const l={},a="Problem Title: Two Sum",r={},c=[{value:"Problem Statement:",id:"problem-statement",level:2},{value:"Explanation",id:"explanation",level:2},{value:"Time &amp; Space Complexity:",id:"time--space-complexity",level:2},{value:"Solution",id:"solution",level:2},{value:"Solution Explanation",id:"solution-explanation",level:2},{value:"LeetCode Official Solutions",id:"leetcode-official-solutions",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsxs)(t.h1,{id:"problem-title-two-sum",children:["Problem Title: ",(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/two-sum",children:"Two Sum"})]})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Difficulty:"})," Easy"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Tags:"})," Array, Hash Table"]}),"\n",(0,i.jsx)(t.h2,{id:"problem-statement",children:"Problem Statement:"}),"\n",(0,i.jsxs)(t.p,{children:["Given an array of integers ",(0,i.jsx)(t.code,{children:"nums"})," and an integer ",(0,i.jsx)(t.code,{children:"target"}),", return indices of the two numbers such that they add up to ",(0,i.jsx)(t.code,{children:"target"}),". You may assume that each input would have exactly one solution, and you may not use the same element twice."]}),"\n",(0,i.jsx)(t.h2,{id:"explanation",children:"Explanation"}),"\n",(0,i.jsxs)(t.p,{children:["To solve this problem, we can use a hash table to store the elements in the array as keys and their indices as values. Then, for each element in the array, we check if its complement (i.e., ",(0,i.jsx)(t.code,{children:"target - nums[i]"}),") is already in the hash table. If it is, we return the current index and the index of the complement. If not, we continue to the next element."]}),"\n",(0,i.jsx)(t.h2,{id:"time--space-complexity",children:"Time & Space Complexity:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Time Complexity:"})," O(n), where n is the length of the array."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Space Complexity:"})," O(n), where n is the length of the array."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-markdown",children:"def twoSum(nums, target):\n    # Create a hash table to store elements and their indices\n    num_dict = {}\n    \n    for i, num in enumerate(nums):\n        # Calculate the complement\n        complement = target - num\n        \n        # Check if the complement is already in the hash table\n        if complement in num_dict:\n            # Return the current index and the index of the complement\n            return [num_dict[complement], i]\n        \n        # Otherwise, store the current element and its index in the hash table\n        num_dict[num] = i\n    \n    # If no solution is found, return an empty list\n    return []\n"})}),"\n",(0,i.jsx)(t.h2,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,i.jsx)(t.p,{children:"The key insight here is to use a hash table to store elements and their indices. By doing so, we can efficiently check if the complement of each element exists in the array. The time complexity is O(n) because we only need to iterate through the array once."}),"\n",(0,i.jsx)(t.h2,{id:"leetcode-official-solutions",children:"LeetCode Official Solutions"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/two-sum/solution/",children:"Official LeetCode Solution"})}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Note: This is a sample solution and may not be the most efficient or elegant solution. It's intended to illustrate the concept and provide a starting point for further optimization.\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var o=n(6540);const i={},s=o.createContext(i);function l(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);