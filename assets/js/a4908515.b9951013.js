"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[108],{8159:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"leetcode/Medium/Letter Combinations of a Phone Number","title":"Letter Combinations of a Phone Number","description":"Letter Combinations of a Phone Number","source":"@site/docs/leetcode/Medium/Letter Combinations of a Phone Number.md","sourceDirName":"leetcode/Medium","slug":"/leetcode/Medium/Letter Combinations of a Phone Number","permalink":"/site/docs/leetcode/Medium/Letter Combinations of a Phone Number","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Medium/Letter Combinations of a Phone Number.md","tags":[],"version":"current","frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"**Integer to Roman**","permalink":"/site/docs/leetcode/Medium/Integer to Roman"},"next":{"title":"**Problem Title: Longest Palindromic Substring**","permalink":"/site/docs/leetcode/Medium/Longest Palindromic Substring"}}');var o=t(4848),r=t(8453);const s={},c=void 0,l={},d=[{value:"Problem Statement",id:"problem-statement",level:3},{value:"Example",id:"example",level:3},{value:"Solution",id:"solution",level:3},{value:"Explanation",id:"explanation",level:3},{value:"Time Complexity",id:"time-complexity",level:3},{value:"Space Complexity",id:"space-complexity",level:3},{value:"Example Use Cases",id:"example-use-cases",level:3}];function a(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Letter Combinations of a Phone Number"})}),"\n",(0,o.jsx)(n.h3,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(n.p,{children:["Given a string ",(0,o.jsx)(n.code,{children:"number"})," of length ",(0,o.jsx)(n.code,{children:"n"}),", return the sequence of letters that would be dialed in order to represent the given number."]}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'number = "23"'}),", return ",(0,o.jsx)(n.code,{children:'"h-x-e"'})," (because ",(0,o.jsx)(n.code,{children:"23"})," is interpreted as ",(0,o.jsx)(n.code,{children:"2 -> 3"}),", ",(0,o.jsx)(n.code,{children:"3 -> x"}),", and ",(0,o.jsx)(n.code,{children:"x -> e"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'number = "222"'}),", return ",(0,o.jsx)(n.code,{children:'"v-v-v"'})," (because ",(0,o.jsx)(n.code,{children:"222"})," is interpreted as ",(0,o.jsx)(n.code,{children:"2 -> 2 -> 2"}),", ",(0,o.jsx)(n.code,{children:"2 -> v"}),", and ",(0,o.jsx)(n.code,{children:"v -> v"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'number = "23"'}),", return ",(0,o.jsx)(n.code,{children:'"h-x-e"'})," (as above)"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"solution",children:"Solution"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Function:"})," ",(0,o.jsx)(n.code,{children:"letterCombinations"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Code:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def letterCombinations(number):\n    if not number:\n        return []\n\n    phone = {\n        "2": "abc",\n        "3": "def",\n        "4": "ghi",\n        "5": "jkl",\n        "6": "mno",\n        "7": "pqrs",\n        "8": "tuv",\n        "9": "wxyz"\n    }\n\n    def backtrack(path, num left):\n        if left == 0:\n            result.append(path)\n            return\n        for letter in phone[num[-1]]:\n            backtrack(path + letter, left - 1)\n\n    result = []\n    backtrack("", number)\n    return result\n'})}),"\n",(0,o.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,o.jsxs)(n.p,{children:["This function uses a recursive approach to build the solution. It defines a dictionary ",(0,o.jsx)(n.code,{children:"phone"})," that maps each digit to its corresponding letters. The ",(0,o.jsx)(n.code,{children:"backtrack"})," function takes two arguments: ",(0,o.jsx)(n.code,{children:"path"}),", which is the current combination of letters, and ",(0,o.jsx)(n.code,{children:"num"}),", which is the remaining number to be dialed."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"If the remaining number is zero, it means we have completed building the solution, so we append it to the result list."}),"\n",(0,o.jsxs)(n.li,{children:["Otherwise, we iterate over each letter in the ",(0,o.jsx)(n.code,{children:"phone"})," dictionary and append it to the current combination ",(0,o.jsx)(n.code,{children:"path"}),". We then recursively call ",(0,o.jsx)(n.code,{children:"backtrack"})," with the updated combination and the decremented remaining number."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Finally, the ",(0,o.jsx)(n.code,{children:"letterCombinations"})," function initializes an empty result list and calls the ",(0,o.jsx)(n.code,{children:"backtrack"})," function with an empty path and the input number."]}),"\n",(0,o.jsx)(n.h3,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,o.jsx)(n.p,{children:"The time complexity of this solution is O(4^n), where n is the length of the input number. This is because for each digit in the input number, we have four possible options (0-3) to choose from."}),"\n",(0,o.jsx)(n.h3,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,o.jsx)(n.p,{children:"The space complexity of this solution is O(4^n) as well, due to the recursive call stack. However, in the worst case scenario, the call stack can grow up to 4^n."}),"\n",(0,o.jsx)(n.h3,{id:"example-use-cases",children:"Example Use Cases"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'letterCombinations("23")'})," returns ",(0,o.jsx)(n.code,{children:'"h-x-e"'})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'letterCombinations("222")'})," returns ",(0,o.jsx)(n.code,{children:'"v-v-v"'})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'letterCombinations("")'})," returns ",(0,o.jsx)(n.code,{children:"[]"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);