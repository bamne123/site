"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[2287],{7643:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"leetcode/Easy/Find Pivot Index","title":"724 - Find Pivot Index","description":"Problem Information","source":"@site/docs/leetcode/Easy/724-Find Pivot Index.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Find Pivot Index","permalink":"/site/docs/leetcode/Easy/Find Pivot Index","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/724-Find Pivot Index.md","tags":[],"version":"current","sidebarPosition":724,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"448 - Find All Numbers Disappeared in an Array","permalink":"/site/docs/leetcode/Easy/Find All Numbers Disappeared in an Array"},"next":{"title":"977 - Squares of a Sorted Array","permalink":"/site/docs/leetcode/Easy/Squares of a Sorted Array"}}');var r=t(4848),s=t(8453),l=t(5537),a=t(9329);const o={},u="724 - Find Pivot Index",c={},d=[{value:"Problem Information",id:"problem-information",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Hints",id:"hints",level:3},{value:"Solution Approach",id:"solution-approach",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:3},{value:"Code Implementation",id:"code-implementation",level:3},{value:"Step-by-Step Explanation",id:"step-by-step-explanation",level:3},{value:"Alternative Approaches",id:"alternative-approaches",level:2},{value:"Common Mistakes and Pitfalls",id:"common-mistakes-and-pitfalls",level:2},{value:"Related Problems",id:"related-problems",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"724---find-pivot-index",children:"724 - Find Pivot Index"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-information",children:"Problem Information"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Difficulty:"})," Easy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Category:"})," Array, Prefix Sum"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Link:"})," ",(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/find-pivot-index",children:"LeetCode"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["Given an array of integers ",(0,r.jsx)(n.code,{children:"nums"}),", calculate the ",(0,r.jsx)(n.strong,{children:"pivot index"})," of this array."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"pivot index"})," is the index where the sum of all the numbers ",(0,r.jsx)(n.strong,{children:"strictly"})," to the left of the index is equal to the sum of all the numbers ",(0,r.jsx)(n.strong,{children:"strictly"})," to the index's right."]}),"\n",(0,r.jsxs)(n.p,{children:["If the index is on the left edge of the array, then the left sum is ",(0,r.jsx)(n.code,{children:"0"})," because there are no elements to the left. This also applies to the right edge of the array."]}),"\n",(0,r.jsxs)(n.p,{children:["Return ",(0,r.jsxs)(n.em,{children:["the ",(0,r.jsx)(n.strong,{children:"leftmost pivot index"})]}),". If no such index exists, return ",(0,r.jsx)(n.code,{children:"-1"}),"."]}),"\n",(0,r.jsx)("p",{children:"\xa0"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("strong",{children:"Example 1:"})}),"\n",(0,r.jsx)("pre",{children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)("strong",{children:"Input:"})," nums = [1,7,3,6,5,6]\n",(0,r.jsx)("strong",{children:"Output:"})," 3\n",(0,r.jsx)("strong",{children:"Explanation:"}),"\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11"]})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("strong",{children:"Example 2:"})}),"\n",(0,r.jsx)("pre",{children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)("strong",{children:"Input:"})," nums = [1,2,3]\n",(0,r.jsx)("strong",{children:"Output:"})," -1\n",(0,r.jsx)("strong",{children:"Explanation:"}),"\nThere is no index that satisfies the conditions in the problem statement."]})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("strong",{children:"Example 3:"})}),"\n",(0,r.jsx)("pre",{children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)("strong",{children:"Input:"})," nums = [2,1,-1]\n",(0,r.jsx)("strong",{children:"Output:"})," 0\n",(0,r.jsx)("strong",{children:"Explanation:"}),"\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0"]})}),"\n",(0,r.jsx)("p",{children:"\xa0"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("strong",{children:"Constraints:"})}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsxs)("code",{children:["1 <= nums.length <= 10",(0,r.jsx)("sup",{children:"4"})]})}),(0,r.jsx)("li",{children:(0,r.jsx)("code",{children:"-1000 <= nums[i] <= 1000"})})]}),"\n",(0,r.jsx)("p",{children:"\xa0"}),"\n",(0,r.jsxs)("p",{children:[(0,r.jsx)("strong",{children:"Note:"})," This question is the same as\xa01991:\xa0",(0,r.jsx)("a",{href:"https://leetcode.com/problems/find-the-middle-index-in-array/",target:"_blank",children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/find-the-middle-index-in-array/",children:"https://leetcode.com/problems/find-the-middle-index-in-array/"})})]}),"\n",(0,r.jsx)(n.h3,{id:"hints",children:"Hints"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Consider prefix sums."}),"\n",(0,r.jsx)(n.li,{children:"The pivot index is the one where prefix sum to the left equals suffix sum to the right."}),"\n",(0,r.jsx)(n.li,{children:"Be careful about edge cases (e.g., first or last element as pivot)."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,r.jsx)(n.p,{children:"The solution uses the prefix sum method to efficiently find the pivot index. It calculates the prefix sum of the array and then iterates through the array to find the index where the left sum equals the right sum."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Video Explanation:"})}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/u89i60lYx8U",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:""}),"\n",(0,r.jsx)(n.h3,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Time Complexity:"})," O(n)","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The algorithm iterates through the array twice, once to calculate the prefix sum and once to find the pivot index."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Space Complexity:"})," O(n)","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"An additional array of size n+1 is used to store the prefix sum."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,r.jsxs)(l.A,{defaultValue:"python",groupId:"cody",values:[{label:"python",value:"python"},{label:"javascript",value:"javascript"},{label:"java",value:"java"},{label:"csharp",value:"csharp"},{label:"go",value:"go"}],children:[(0,r.jsx)(a.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def pivotIndex(self, nums: List[int]) -> int:\n        # Prefix Sum Method\n        prefixSum = [0] * (len(nums) + 1)\n\n        # Populate Prefix Sum\n        for i in range(len(nums)):\n            prefixSum[i + 1] += prefixSum[i] + nums[i]\n\n        for i in range(len(nums)):\n            leftSum = prefixSum[i]  # leftSum is Current Total\n            rightSum = prefixSum[-1] - prefixSum[i + 1] # rightSum is last total - next total\n\n            if leftSum == rightSum:\n                return i\n        \n        return -1\n"})})}),(0,r.jsx)(a.A,{value:"javascript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar pivotIndex = function(nums) {\n    let prefixSum = new Array(nums.length + 1).fill(0);\n    \n    for (let i = 0; i < nums.length; i++) {\n        prefixSum[i + 1] = prefixSum[i] + nums[i];\n    }\n    \n    for (let i = 0; i < nums.length; i++) {\n        let leftSum = prefixSum[i];\n        let rightSum = prefixSum[nums.length] - prefixSum[i + 1];\n        \n        if (leftSum === rightSum) {\n            return i;\n        }\n    }\n    \n    return -1;\n};\n"})})}),(0,r.jsx)(a.A,{value:"java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int pivotIndex(int[] nums) {\n        int[] prefixSum = new int[nums.length + 1];\n        \n        for (int i = 0; i < nums.length; i++) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i];\n        }\n        \n        for (int i = 0; i < nums.length; i++) {\n            int leftSum = prefixSum[i];\n            int rightSum = prefixSum[nums.length] - prefixSum[i + 1];\n            \n            if (leftSum == rightSum) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n}\n"})})}),(0,r.jsx)(a.A,{value:"csharp",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class Solution {\n    public int PivotIndex(int[] nums) {\n        int[] prefixSum = new int[nums.Length + 1];\n        \n        for (int i = 0; i < nums.Length; i++) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i];\n        }\n        \n        for (int i = 0; i < nums.Length; i++) {\n            int leftSum = prefixSum[i];\n            int rightSum = prefixSum[nums.Length] - prefixSum[i + 1];\n            \n            if (leftSum == rightSum) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n}\n"})})}),(0,r.jsx)(a.A,{value:"go",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func pivotIndex(nums []int) int {\n    prefixSum := make([]int, len(nums) + 1)\n    \n    for i := 0; i < len(nums); i++ {\n        prefixSum[i + 1] = prefixSum[i] + nums[i]\n    }\n    \n    for i := 0; i < len(nums); i++ {\n        leftSum := prefixSum[i]\n        rightSum := prefixSum[len(nums)] - prefixSum[i + 1]\n        \n        if leftSum == rightSum {\n            return i\n        }\n    }\n    \n    return -1\n}\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"step-by-step-explanation",children:"Step-by-Step Explanation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Initialize a prefix sum array of size n+1 with all elements set to 0."}),"\n",(0,r.jsx)(n.li,{children:"Calculate the prefix sum for each index in the input array."}),"\n",(0,r.jsx)(n.li,{children:"Iterate through the input array, and for each index, calculate the left sum and right sum using the prefix sum array."}),"\n",(0,r.jsx)(n.li,{children:"If the left sum equals the right sum, return the current index."}),"\n",(0,r.jsx)(n.li,{children:"If no such index is found, return -1."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"alternative-approaches",children:"Alternative Approaches"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Using Total Sum"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Calculate the total sum of the array. Iterate through the array, keeping track of the left sum. The right sum can be calculated as totalSum - leftSum - nums[i]."}),"\n",(0,r.jsx)(n.li,{children:"Time Complexity: O(n)"}),"\n",(0,r.jsx)(n.li,{children:"Space Complexity: O(1)"}),"\n",(0,r.jsx)(n.li,{children:"Trade-offs: More space-efficient as it doesn't require an additional array, but the time complexity remains the same."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-mistakes-and-pitfalls",children:"Common Mistakes and Pitfalls"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Forgetting the edge cases where the pivot is the first or last element."}),"\n",(0,r.jsx)(n.li,{children:"Not handling cases where no pivot exists, returning -1."}),"\n",(0,r.jsx)(n.li,{children:"Incorrectly calculating prefix sum or left and right sums."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-problems",children:"Related Problems"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/running-sum-of-1d-array/",children:"Running Sum of 1d Array"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/find-the-middle-index-in-array/",children:"Find the Middle Index in Array"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},9329:(e,n,t)=>{t.d(n,{A:()=>l});t(6540);var i=t(4164);const r={tabItem:"tabItem_Ymn6"};var s=t(4848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,l),hidden:t,children:n})}},5537:(e,n,t)=>{t.d(n,{A:()=>S});var i=t(6540),r=t(4164),s=t(5627),l=t(6347),a=t(372),o=t(604),u=t(1861),c=t(8749);function d(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const r=(0,l.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=h(e),[l,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:s}))),[u,d]=p({queryString:t,groupId:r}),[x,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,c.Dv)(t);return[r,(0,i.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),j=(()=>{const e=u??x;return m({value:e,tabValues:s})?e:null})();(0,a.A)((()=>{j&&o(j)}),[j]);return{selectedValue:l,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),f(e)}),[d,f,s]),tabValues:s}}var f=t(9136);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(4848);function v(e){let{className:n,block:t,selectedValue:i,selectValue:l,tabValues:a}=e;const o=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.a_)(),c=e=>{const n=e.currentTarget,t=o.indexOf(n),r=a[t].value;r!==i&&(u(n),l(r))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...s,className:(0,r.A)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:s}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function y(e){const n=x(e);return(0,g.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,g.jsx)(v,{...n,...e}),(0,g.jsx)(b,{...n,...e})]})}function S(e){const n=(0,f.A)();return(0,g.jsx)(y,{...e,children:d(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);