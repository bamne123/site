"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[863],{8054:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"leetcode/Easy/Merge Two Sorted Lists","title":"**Merge Two Sorted Lists**","description":"Problem Statement","source":"@site/docs/leetcode/Easy/Merge Two Sorted Lists.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Merge Two Sorted Lists","permalink":"/site/docs/leetcode/Easy/Merge Two Sorted Lists","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/Merge Two Sorted Lists.md","tags":[],"version":"current","frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Longest Common Prefix","permalink":"/site/docs/leetcode/Easy/Longest Common Prefix"},"next":{"title":"**Palindrome Number**","permalink":"/site/docs/leetcode/Easy/Palindrome Number"}}');var r=s(4848),o=s(8453);const i={},l="Merge Two Sorted Lists",d={},c=[{value:"<strong>Problem Statement</strong>",id:"problem-statement",level:3},{value:"<strong>Solution</strong>",id:"solution",level:3},{value:"<strong>Explanation</strong>",id:"explanation",level:3},{value:"<strong>Time Complexity</strong>",id:"time-complexity",level:3},{value:"<strong>Space Complexity</strong>",id:"space-complexity",level:3},{value:"<strong>Example Use Case</strong>",id:"example-use-case",level:3}];function a(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"merge-two-sorted-lists",children:(0,r.jsx)(n.strong,{children:"Merge Two Sorted Lists"})})}),"\n",(0,r.jsx)(n.h3,{id:"problem-statement",children:(0,r.jsx)(n.strong,{children:"Problem Statement"})}),"\n",(0,r.jsx)(n.p,{children:"Merge two sorted lists into a single sorted list."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example"})}),"\n",(0,r.jsxs)(n.p,{children:["Given two sorted lists ",(0,r.jsx)(n.code,{children:"nums1 = [1, 2, 3, 0, 0, 0]"})," and ",(0,r.jsx)(n.code,{children:"nums2 = [0, 0, 1, 2]"}),", merge them into a single sorted list ",(0,r.jsx)(n.code,{children:"nums3 = [0, 0, 1, 2, 3]"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"solution",children:(0,r.jsx)(n.strong,{children:"Solution"})}),"\n",(0,r.jsx)(n.p,{children:"We'll provide a solution in Python. Here's the code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def merge(self, nums1: list[int], m: int, nums2: list[int]) -> list[int]:\n        # Create a new list to store the result\n        result = []\n        \n        # Initialize indices for nums1 and nums2\n        i, j = m, m\n        \n        # Merge smaller elements first\n        while i < m and j < m:\n            if nums1[i] < nums2[j]:\n                result.append(nums1[i])\n                i += 1\n            else:\n                result.append(nums2[j])\n                j += 1\n        \n        # If there are remaining elements in nums1, append them to the result\n        while i < m:\n            result.append(nums1[i])\n            i += 1\n        \n        # If there are remaining elements in nums2, append them to the result\n        while j < m:\n            result.append(nums2[j])\n            j += 1\n        \n        return result\n"})}),"\n",(0,r.jsx)(n.h3,{id:"explanation",children:(0,r.jsx)(n.strong,{children:"Explanation"})}),"\n",(0,r.jsxs)(n.p,{children:["This solution uses a two-pointer technique to merge the two sorted lists. The ",(0,r.jsx)(n.code,{children:"merge"})," method takes three parameters: ",(0,r.jsx)(n.code,{children:"nums1"}),", ",(0,r.jsx)(n.code,{children:"m"}),", and ",(0,r.jsx)(n.code,{children:"nums2"}),". ",(0,r.jsx)(n.code,{children:"nums1"})," is the first sorted list, and ",(0,r.jsx)(n.code,{children:"m"})," is the length of ",(0,r.jsx)(n.code,{children:"nums1"}),". ",(0,r.jsx)(n.code,{children:"nums2"})," is the second sorted list."]}),"\n",(0,r.jsxs)(n.p,{children:["The method creates a new list ",(0,r.jsx)(n.code,{children:"result"})," to store the merged result. It then initializes two pointers, ",(0,r.jsx)(n.code,{children:"i"})," and ",(0,r.jsx)(n.code,{children:"j"}),", to the start of ",(0,r.jsx)(n.code,{children:"nums1"})," and ",(0,r.jsx)(n.code,{children:"nums2"}),", respectively."]}),"\n",(0,r.jsxs)(n.p,{children:["The method enters a loop that continues until one of the pointers reaches the end of its list. In each iteration, it compares the current elements of ",(0,r.jsx)(n.code,{children:"nums1"})," and ",(0,r.jsx)(n.code,{children:"nums2"})," and appends the smaller element to the ",(0,r.jsx)(n.code,{children:"result"})," list. Finally, it appends the remaining elements from ",(0,r.jsx)(n.code,{children:"nums1"})," or ",(0,r.jsx)(n.code,{children:"nums2"})," to the ",(0,r.jsx)(n.code,{children:"result"})," list."]}),"\n",(0,r.jsx)(n.h3,{id:"time-complexity",children:(0,r.jsx)(n.strong,{children:"Time Complexity"})}),"\n",(0,r.jsxs)(n.p,{children:["The time complexity of this solution is O(m + n), where m and n are the lengths of ",(0,r.jsx)(n.code,{children:"nums1"})," and ",(0,r.jsx)(n.code,{children:"nums2"}),", respectively."]}),"\n",(0,r.jsx)(n.h3,{id:"space-complexity",children:(0,r.jsx)(n.strong,{children:"Space Complexity"})}),"\n",(0,r.jsx)(n.p,{children:"The space complexity is O(n), where n is the length of the merged list."}),"\n",(0,r.jsx)(n.h3,{id:"example-use-case",children:(0,r.jsx)(n.strong,{children:"Example Use Case"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"solution = Solution()\nnums1 = [1, 2, 3, 0, 0, 0]\nnums2 = [0, 0, 1, 2]\nresult = solution.merge(nums1, len(nums1), nums2)\nprint(result)  # [0, 0, 1, 2, 3]\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var t=s(6540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);