"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[6687],{7881:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"leetcode/Medium/Longest Palindromic Substring","title":"**Longest Palindromic Substring**","description":"Problem Statement","source":"@site/docs/leetcode/Medium/5-Longest Palindromic Substring.md","sourceDirName":"leetcode/Medium","slug":"/leetcode/Medium/Longest Palindromic Substring","permalink":"/site/docs/leetcode/Medium/Longest Palindromic Substring","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Medium/5-Longest Palindromic Substring.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Longest Substring Without Repeating Characters","permalink":"/site/docs/leetcode/Medium/Longest Substring Without Repeating Characters"}}');var i=s(4848),r=s(8453);const l={},o="Longest Palindromic Substring",a={},d=[{value:"<strong>Problem Statement</strong>",id:"problem-statement",level:2},{value:"<strong>Examples</strong>",id:"examples",level:2},{value:"<strong>Constraints</strong>",id:"constraints",level:2},{value:"<strong>Complexity Analysis</strong>",id:"complexity-analysis",level:2},{value:"<strong>Code Implementation</strong>",id:"code-implementation",level:2},{value:"<strong>Step-by-Step Explanation</strong>",id:"step-by-step-explanation",level:2},{value:"<strong>Example Use Cases</strong>",id:"example-use-cases",level:2},{value:"<strong>Alternative Solution</strong>",id:"alternative-solution",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"longest-palindromic-substring",children:(0,i.jsx)(n.strong,{children:"Longest Palindromic Substring"})})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:(0,i.jsx)(n.strong,{children:"Problem Statement"})}),"\n",(0,i.jsxs)(n.p,{children:["Given a string ",(0,i.jsx)(n.code,{children:"s"}),", find the length of the longest palindromic substring."]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:(0,i.jsx)(n.strong,{children:"Examples"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input: ",(0,i.jsx)(n.code,{children:'s = "babad"'}),"\nOutput: ",(0,i.jsx)(n.code,{children:"2"})," (because ",(0,i.jsx)(n.code,{children:'"bab"'})," is the longest palindromic substring)"]}),"\n",(0,i.jsxs)(n.li,{children:["Input: ",(0,i.jsx)(n.code,{children:'s = "cbbd"'}),"\nOutput: ",(0,i.jsx)(n.code,{children:"1"})," (because ",(0,i.jsx)(n.code,{children:'"c"'})," is the longest palindromic substring)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"constraints",children:(0,i.jsx)(n.strong,{children:"Constraints"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input string ",(0,i.jsx)(n.code,{children:"s"})," is a non-empty string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"s"})," contains only lowercase English letters"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"complexity-analysis",children:(0,i.jsx)(n.strong,{children:"Complexity Analysis"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Time complexity: O(n^2)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"We have two nested loops to check all possible substrings"}),"\n",(0,i.jsx)(n.li,{children:"The outer loop has a maximum of n iterations, and the inner loop has a maximum of n/2 iterations (dividing by 2 to avoid counting the same substring twice)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Space complexity: O(1)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"We only use a constant amount of space to store variables"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"code-implementation",children:(0,i.jsx)(n.strong,{children:"Code Implementation"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def longest_palindromic_substring(s: str) -> int:\n    """\n    Returns the length of the longest palindromic substring in the input string.\n\n    :param s: The input string\n    :return: The length of the longest palindromic substring\n    """\n    n = len(s)\n    longest_length = 0\n\n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n\n            # Check if the substring is a palindrome\n            if substring == substring[::-1]:\n                # Update the longest length if necessary\n                longest_length = max(longest_length, len(substring))\n\n    return longest_length\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-by-step-explanation",children:(0,i.jsx)(n.strong,{children:"Step-by-Step Explanation"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Initialize the ",(0,i.jsx)(n.code,{children:"longest_length"})," variable to 0. This variable will store the length of the longest palindromic substring."]}),"\n",(0,i.jsx)(n.li,{children:"Iterate over all possible substrings using the outer loop."}),"\n",(0,i.jsx)(n.li,{children:"For each substring, iterate over all possible substrings starting from the current index using the inner loop."}),"\n",(0,i.jsxs)(n.li,{children:["Check if the current substring is a palindrome by comparing it to its reverse (",(0,i.jsx)(n.code,{children:"substring[::-1]"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["If the substring is a palindrome, update the ",(0,i.jsx)(n.code,{children:"longest_length"})," variable if necessary."]}),"\n",(0,i.jsxs)(n.li,{children:["Return the ",(0,i.jsx)(n.code,{children:"longest_length"})," variable at the end of the function."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-use-cases",children:(0,i.jsx)(n.strong,{children:"Example Use Cases"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print(longest_palindromic_substring("babad"))  # Output: 2\nprint(longest_palindromic_substring("cbbd"))   # Output: 1\nprint(longest_palindromic_substring("abc"))   # Output: 1\n'})}),"\n",(0,i.jsx)(n.h2,{id:"alternative-solution",children:(0,i.jsx)(n.strong,{children:"Alternative Solution"})}),"\n",(0,i.jsxs)(n.p,{children:["We can solve this problem using dynamic programming. The idea is to build a 2D table ",(0,i.jsx)(n.code,{children:"dp"})," where ",(0,i.jsx)(n.code,{children:"dp[i][j]"})," is the length of the longest palindromic substring ending at index ",(0,i.jsx)(n.code,{children:"i"})," and the character at index ",(0,i.jsx)(n.code,{children:"j"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def longest_palindromic_substring(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n        else:\n            dp[i][i + 1] = 1\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n\n            if s[i] == s[j] and dp[i + 1][j - 1] == length - 1:\n                dp[i][j] = length\n\n    return dp[0][n - 1]\n"})}),"\n",(0,i.jsx)(n.p,{children:"This solution has the same time and space complexity as the previous one, but it uses dynamic programming to build the 2D table."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);