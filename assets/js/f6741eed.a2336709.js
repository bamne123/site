"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[6347],{7332:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"leetcode/Medium/Longest Palindromic Substring","title":"Longest Palindromic Substring","description":"1. Gather the Problem Details for creating markdown data","source":"@site/docs/leetcode/Medium/Longest Palindromic Substring.md","sourceDirName":"leetcode/Medium","slug":"/leetcode/Medium/Longest Palindromic Substring","permalink":"/site/docs/leetcode/Medium/Longest Palindromic Substring","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Medium/Longest Palindromic Substring.md","tags":[],"version":"current","frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Add Two Numbers","permalink":"/site/docs/leetcode/Medium/Add Two Numbers"},"next":{"title":"Longest Substring Without Repeating Characters","permalink":"/site/docs/leetcode/Medium/Longest Substring Without Repeating Characters"}}');var r=t(4848),o=t(8453);const s={},l=void 0,a={},d=[{value:"<strong>1. Gather the Problem Details for creating markdown data</strong>",id:"1-gather-the-problem-details-for-creating-markdown-data",level:3},{value:"Problem Title: Longest Palindromic Substring",id:"problem-title-longest-palindromic-substring",level:3},{value:"Difficulty: Medium",id:"difficulty-medium",level:3},{value:"Tags: String, Dynamic Programming",id:"tags-string-dynamic-programming",level:3},{value:"Problem Statement:",id:"problem-statement",level:3},{value:"<strong>2. Extract the Solution (if provided by the user)</strong>",id:"2-extract-the-solution-if-provided-by-the-user",level:3},{value:"<strong>3. Generate a Markdown Data</strong>",id:"3-generate-a-markdown-data",level:3},{value:"Solution Explanation",id:"solution-explanation",level:2},{value:"LeetCode Official Solutions",id:"leetcode-official-solutions",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"1-gather-the-problem-details-for-creating-markdown-data",children:(0,r.jsx)(n.strong,{children:"1. Gather the Problem Details for creating markdown data"})}),"\n",(0,r.jsx)(n.h3,{id:"problem-title-longest-palindromic-substring",children:"Problem Title: Longest Palindromic Substring"}),"\n",(0,r.jsx)(n.h3,{id:"difficulty-medium",children:"Difficulty: Medium"}),"\n",(0,r.jsx)(n.h3,{id:"tags-string-dynamic-programming",children:"Tags: String, Dynamic Programming"}),"\n",(0,r.jsx)(n.h3,{id:"problem-statement",children:"Problem Statement:"}),"\n",(0,r.jsxs)(n.p,{children:["Given a string ",(0,r.jsx)(n.code,{children:"s"}),", return the longest palindromic substring in ",(0,r.jsx)(n.code,{children:"s"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"2-extract-the-solution-if-provided-by-the-user",children:(0,r.jsx)(n.strong,{children:"2. Extract the Solution (if provided by the user)"})}),"\n",(0,r.jsx)(n.p,{children:"Unfortunately, no solution was provided by the user. We will provide a solution below."}),"\n",(0,r.jsx)(n.h3,{id:"3-generate-a-markdown-data",children:(0,r.jsx)(n.strong,{children:"3. Generate a Markdown Data"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-md",children:'# Problem Title: [Longest Palindromic Substring](https://leetcode.com/problems/longest-palindromic-substring)\n\n**Difficulty:** Medium\n\n**Tags:** String, Dynamic Programming\n\n**Problem Statement:**  \nGiven a string `s`, return the longest palindromic substring in `s`.\n\n## Explanation  \nA palindromic substring is a substring that reads the same backwards as forwards. For example, in the string "babad", the longest palindromic substring is "bab".\n\n## Time & Space Complexity  \n- **Time Complexity:** O(n^2)\n- **Space Complexity:** O(1)\n\n## Solution  \n```language\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        def expand_around_center(left: int, right: int) -> str:\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            return s[left + 1:right]\n        \n        longest = ""\n        for i in range(len(s)):\n            # odd length palindrome\n            palindrome = expand_around_center(i, i)\n            if len(palindrome) > len(longest):\n                longest = palindrome\n            \n            # even length palindrome\n            palindrome = expand_around_center(i, i + 1)\n            if len(palindrome) > len(longest):\n                longest = palindrome\n        \n        return longest\n'})}),"\n",(0,r.jsx)(n.h2,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,r.jsxs)(n.p,{children:["This solution uses a helper function ",(0,r.jsx)(n.code,{children:"expand_around_center"})," to expand around the center of a palindrome and find the longest palindrome. It iterates over the string, treating each character as the center of a potential palindrome, and updates the ",(0,r.jsx)(n.code,{children:"longest"})," substring if a longer palindrome is found."]}),"\n",(0,r.jsx)(n.h2,{id:"leetcode-official-solutions",children:"LeetCode Official Solutions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/longest-palindromic-substring/solution/",children:"Official LeetCode Solution"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);