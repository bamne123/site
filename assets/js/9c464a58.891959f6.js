"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[2287],{7643:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"leetcode/Easy/Find Pivot Index","title":"724 - Find Pivot Index","description":"Problem Information","source":"@site/docs/leetcode/Easy/724-Find Pivot Index.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Find Pivot Index","permalink":"/site/docs/leetcode/Easy/Find Pivot Index","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/724-Find Pivot Index.md","tags":[],"version":"current","sidebarPosition":724,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"448 - Find All Numbers Disappeared in an Array","permalink":"/site/docs/leetcode/Easy/Find All Numbers Disappeared in an Array"},"next":{"title":"977 - Squares of a Sorted Array","permalink":"/site/docs/leetcode/Easy/Squares of a Sorted Array"}}');var t=i(4848),l=i(8453),s=i(5537),a=i(9329);const o={},u="724 - Find Pivot Index",c={},d=[{value:"Problem Information",id:"problem-information",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Examples",id:"examples",level:3},{value:"Solution Approach",id:"solution-approach",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:2},{value:"Code Implementation",id:"code-implementation",level:2},{value:"Step-by-Step Explanation",id:"step-by-step-explanation",level:2},{value:"Related Problems",id:"related-problems",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"724---find-pivot-index",children:"724 - Find Pivot Index"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-information",children:"Problem Information"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Difficulty:"})," Easy"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Category:"})," Array, Prefix Sum"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Link:"})," ",(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/find-pivot-index",children:"LeetCode"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["Given an array of integers ",(0,t.jsx)(n.code,{children:"nums"}),", write a function ",(0,t.jsx)(n.code,{children:"pivotIndex(nums)"})," that returns the index of the pivot index (if it exists).\nThe pivot index is defined as the index ",(0,t.jsx)(n.code,{children:"i"})," where the sum of the elements before ",(0,t.jsx)(n.code,{children:"i"})," is equal to the sum of the elements after ",(0,t.jsx)(n.code,{children:"i"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If no pivot index exists, return ",(0,t.jsx)(n.code,{children:"-1"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(n.p,{children:["Input: ",(0,t.jsx)(n.code,{children:"nums = [1, 7, 3, 6, 5, 6]"}),"\nOutput: ",(0,t.jsx)(n.code,{children:"3"}),"\nExplanation: ",(0,t.jsx)(n.code,{children:"sum(0, 2) = 1 + 7 + 3 = 11"}),"\n",(0,t.jsx)(n.code,{children:"sum(3, 5) = 6 + 5 + 6 = 17"}),"\n",(0,t.jsx)(n.code,{children:"nums[3] = 6"})," is the pivot index."]}),"\n",(0,t.jsx)(n.h2,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,t.jsx)(n.p,{children:"We can efficiently find the pivot index by calculating the prefix sum of the array."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Calculate Prefix Sum:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Create an array ",(0,t.jsx)(n.code,{children:"prefixSum"})," to store the cumulative sum of elements."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefixSum[i]"})," will represent the sum of elements from index 0 to ",(0,t.jsx)(n.code,{children:"i"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Find Pivot Index:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Iterate through the array ",(0,t.jsx)(n.code,{children:"nums"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["For each index ",(0,t.jsx)(n.code,{children:"i"}),", calculate the sum of elements after ",(0,t.jsx)(n.code,{children:"i"})," (",(0,t.jsx)(n.code,{children:"totalSum - prefixSum[i]"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["If the sum of elements before ",(0,t.jsx)(n.code,{children:"i"})," (",(0,t.jsx)(n.code,{children:"prefixSum[i]"}),") equals the sum of elements after ",(0,t.jsx)(n.code,{children:"i"}),", then ",(0,t.jsx)(n.code,{children:"i"})," is the pivot index."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Time Complexity:"})," O(n)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Calculating the prefix sum takes O(n) time."}),"\n",(0,t.jsx)(n.li,{children:"Iterating through the array to find the pivot index takes O(n) time."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Space Complexity:"})," O(n)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"prefixSum"})," array stores the cumulative sum up to each element, requiring O(n) space."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,t.jsxs)(s.A,{defaultValue:"python",groupId:"cody",values:[{label:"Javascript",value:"javascript"},{label:"Python",value:"python"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"C#",value:"csharp"}],children:[(0,t.jsx)(a.A,{value:"javascript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function pivotIndex(nums) {\n  const n = nums.length;\n  const prefixSum = new Array(n + 1).fill(0);\n\n  for (let i = 0; i < n; i++) {\n    prefixSum[i + 1] = prefixSum[i] + nums[i];\n  }\n\n  for (let i = 0; i < n; i++) {\n    const leftSum = prefixSum[i];\n    const rightSum = prefixSum[n] - prefixSum[i + 1];\n    if (leftSum === rightSum) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n"})})}),(0,t.jsx)(a.A,{value:"python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def pivotIndex(nums):\n  n = len(nums)\n  prefixSum = [0] * (n + 1)\n  for i in range(n):\n    prefixSum[i + 1] = prefixSum[i] + nums[i]\n\n  for i in range(n):\n    leftSum = prefixSum[i]\n    rightSum = prefixSum[n] - prefixSum[i + 1]\n    if leftSum == rightSum:\n      return i\n  return -1\n"})})}),(0,t.jsx)(a.A,{value:"go",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func pivotIndex(nums []int) int {\n  n := len(nums)\n  prefixSum := make([]int, n+1)\n  for i := 0; i < n; i++ {\n    prefixSum[i+1] = prefixSum[i] + nums[i]\n  }\n\n  for i := 0; i < n; i++ {\n    leftSum := prefixSum[i]\n    rightSum := prefixSum[n] - prefixSum[i+1]\n    if leftSum == rightSum {\n      return i\n    }\n  }\n\n  return -1\n}\n"})})}),(0,t.jsx)(a.A,{value:"java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int pivotIndex(int[] nums) {\n        int n = nums.length;\n        int[] prefixSum = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i];\n        }\n\n        for (int i = 0; i < n; i++) {\n            int leftSum = prefixSum[i];\n            int rightSum = prefixSum[n] - prefixSum[i + 1];\n            if (leftSum == rightSum) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n}\n"})})}),(0,t.jsx)(a.A,{value:"csharp",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class Solution {\n    public int PivotIndex(int[] nums) {\n        int n = nums.Length;\n        int[] prefixSum = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i];\n        }\n\n        for (int i = 0; i < n; i++) {\n            int leftSum = prefixSum[i];\n            int rightSum = prefixSum[n] - prefixSum[i + 1];\n            if (leftSum == rightSum) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n}\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"step-by-step-explanation",children:"Step-by-Step Explanation"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Calculate the prefix sum of the array."}),"\n",(0,t.jsx)(n.li,{children:"Iterate through the array."}),"\n",(0,t.jsxs)(n.li,{children:["For each index ",(0,t.jsx)(n.code,{children:"i"}),", calculate the sum of elements before ",(0,t.jsx)(n.code,{children:"i"})," (",(0,t.jsx)(n.code,{children:"prefixSum[i]"}),") and the sum of elements after ",(0,t.jsx)(n.code,{children:"i"})," (",(0,t.jsx)(n.code,{children:"prefixSum[n] - prefixSum[i + 1]"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["If the two sums are equal, return the index ",(0,t.jsx)(n.code,{children:"i"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If no pivot index is found, return ",(0,t.jsx)(n.code,{children:"-1"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-problems",children:"Related Problems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/equal-subarrays/",children:"Equal Subarrays"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/find-the-distance-of-the-nearest-lexicographically-larger-letter",children:"Find the Distance of the Nearest Lexicographically Larger Letter"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},9329:(e,n,i)=>{i.d(n,{A:()=>s});i(6540);var r=i(4164);const t={tabItem:"tabItem_Ymn6"};var l=i(4848);function s(e){let{children:n,hidden:i,className:s}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,r.A)(t.tabItem,s),hidden:i,children:n})}},5537:(e,n,i)=>{i.d(n,{A:()=>y});var r=i(6540),t=i(4164),l=i(5627),s=i(6347),a=i(372),o=i(604),u=i(1861),c=i(8749);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:i}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:i,attributes:r,default:t}}=e;return{value:n,label:i,attributes:r,default:t}}))}(i);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,i])}function m(e){let{value:n,tabValues:i}=e;return i.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:i}=e;const t=(0,s.W6)(),l=function(e){let{queryString:n=!1,groupId:i}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:n,groupId:i});return[(0,o.aZ)(l),(0,r.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(t.location.search);n.set(l,e),t.replace({...t.location,search:n.toString()})}),[l,t])]}function p(e){const{defaultValue:n,queryString:i=!1,groupId:t}=e,l=h(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=i.find((e=>e.default))??i[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:l}))),[u,d]=x({queryString:i,groupId:t}),[p,f]=function(e){let{groupId:n}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,l]=(0,c.Dv)(i);return[t,(0,r.useCallback)((e=>{i&&l.set(e)}),[i,l])]}({groupId:t}),j=(()=>{const e=u??p;return m({value:e,tabValues:l})?e:null})();(0,a.A)((()=>{j&&o(j)}),[j]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),f(e)}),[d,f,l]),tabValues:l}}var f=i(9136);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=i(4848);function b(e){let{className:n,block:i,selectedValue:r,selectValue:s,tabValues:a}=e;const o=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.a_)(),c=e=>{const n=e.currentTarget,i=o.indexOf(n),t=a[i].value;t!==r&&(u(n),s(t))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const i=o.indexOf(e.currentTarget)+1;n=o[i]??o[0];break}case"ArrowLeft":{const i=o.indexOf(e.currentTarget)-1;n=o[i]??o[o.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":i},n),children:a.map((e=>{let{value:n,label:i,attributes:l}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...l,className:(0,t.A)("tabs__item",j.tabItem,l?.className,{"tabs__item--active":r===n}),children:i??n},n)}))})}function S(e){let{lazy:n,children:i,selectedValue:l}=e;const s=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===l));return e?(0,r.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function g(e){const n=p(e);return(0,v.jsxs)("div",{className:(0,t.A)("tabs-container",j.tabList),children:[(0,v.jsx)(b,{...n,...e}),(0,v.jsx)(S,{...n,...e})]})}function y(e){const n=(0,f.A)();return(0,v.jsx)(g,{...e,children:d(e.children)},String(n))}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var r=i(6540);const t={},l=r.createContext(t);function s(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);