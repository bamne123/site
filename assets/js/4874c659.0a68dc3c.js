"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[8751],{6455:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"leetcode/Easy/Longest Common Prefix","title":"Longest Common Prefix","description":"Gather the Problem Details for creating markdown data","source":"@site/docs/leetcode/Easy/Longest Common Prefix.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Longest Common Prefix","permalink":"/site/docs/leetcode/Easy/Longest Common Prefix","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/Longest Common Prefix.md","tags":[],"version":"current","frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Welcome","permalink":"/site/docs/leetcode/sytem-design/intro"},"next":{"title":"**Merge Two Sorted Lists**","permalink":"/site/docs/leetcode/Easy/Merge Two Sorted Lists"}}');var s=t(4848),r=t(8453);const i={},l=void 0,a={},d=[{value:"<strong>1. Explanation of the Problem</strong>",id:"1-explanation-of-the-problem",level:3},{value:"<strong>2. Solution (if provided by the user)</strong>",id:"2-solution-if-provided-by-the-user",level:3},{value:"<strong>4. Generate a Markdown Data</strong>",id:"4-generate-a-markdown-data",level:3},{value:"Example Use Case",id:"example-use-case",level:2},{value:"<strong>5. Additional Features</strong>",id:"5-additional-features",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Gather the Problem Details for creating markdown data"})}),"\n",(0,s.jsxs)(n.p,{children:["Title of problem is Longest Common Prefix.\nFetch the full problem statement from the link: ",(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/longest-common-prefix",children:"https://leetcode.com/problems/longest-common-prefix"}),".\nProvide a clear explanation of the problem with an example for better understanding."]}),"\n",(0,s.jsx)(n.h3,{id:"1-explanation-of-the-problem",children:(0,s.jsx)(n.strong,{children:"1. Explanation of the Problem"})}),"\n",(0,s.jsx)(n.p,{children:"The problem is to find the longest common prefix between a given string and another string. The goal is to determine the longest sequence of characters that appears in both strings."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.p,{children:"Given two strings:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'s = "flower"\nt = "flow"\n'})}),"\n",(0,s.jsx)(n.p,{children:'The longest common prefix between "flower" and "flow" is "fl".'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The strings only contain lowercase English letters."}),"\n",(0,s.jsx)(n.li,{children:"The strings are case-insensitive."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-solution-if-provided-by-the-user",children:(0,s.jsx)(n.strong,{children:"2. Solution (if provided by the user)"})}),"\n",(0,s.jsx)(n.p,{children:"Detect and format the user's code in Markdown.\nAnalyze and explain the time complexity and space complexity of the solution."}),"\n",(0,s.jsx)(n.h3,{id:"4-generate-a-markdown-data",children:(0,s.jsx)(n.strong,{children:"4. Generate a Markdown Data"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-md",children:'# Problem Title: Longest Common Prefix  \n# Problem Statement: Find the longest common prefix between two given strings.  \n# Difficulty: Easy  \n# Tags: String, Trie  \n# URL: https://leetcode.com/problems/longest-common-prefix  \n\n## Explanation  \nThe problem is to find the longest common prefix between a given string and another string. The goal is to determine the longest sequence of characters that appears in both strings.\n\n## Time & Space Complexity  \n- **Time Complexity:** O(n + m)  \n- **Space Complexity:** O(1)  \n\n## Solution  \n```language\n[User\'s solution code]\n\n## Explanation  \nThis solution uses a helper function to compare characters at the same position in both strings. If a character is the same, add it to the result. If not, break the loop.\n\n```python\ndef longestCommonPrefix(str1, str2):\n    result = ""\n    for i in range(min(len(str1), len(str2))):\n        if str1[i] == str2[i]:\n            result += str1[i]\n        else:\n            break\n    return result\n'})}),"\n",(0,s.jsx)(n.h2,{id:"example-use-case",children:"Example Use Case"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'s = "flower"\nt = "flow"\nprint(longestCommonPrefix(s, t))  # Output: "fl"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"5-additional-features",children:(0,s.jsx)(n.strong,{children:"5. Additional Features"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'If no solution is provided by the user, leave the "Solution" section empty.'}),"\n",(0,s.jsx)(n.li,{children:"If the problem is not found, respond with a polite message."}),"\n",(0,s.jsx)(n.li,{children:"Ensure that the JSON structure is valid and all fields are properly filled."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Your goal is to automate and streamline ",(0,s.jsx)(n.strong,{children:"LeetCode problem documentation"}),", organizes the problem, solution, and explanations efficiently."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);