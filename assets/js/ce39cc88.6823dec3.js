"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[2293],{9:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"leetcode/Medium/Longest Substring Without Repeating Characters","title":"Longest Substring Without Repeating Characters","description":"Problem Title: Longest Substring Without Repeating Characters","source":"@site/docs/leetcode/Medium/Longest Substring Without Repeating Characters.md","sourceDirName":"leetcode/Medium","slug":"/leetcode/Medium/Longest Substring Without Repeating Characters","permalink":"/site/docs/leetcode/Medium/Longest Substring Without Repeating Characters","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Medium/Longest Substring Without Repeating Characters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Longest Palindromic Substring","permalink":"/site/docs/leetcode/Medium/Longest Palindromic Substring"},"next":{"title":"Problem Title: 3 Sum Problem","permalink":"/site/docs/leetcode/test"}}');var i=n(4848),r=n(8453);const o={},l=void 0,a={},h=[{value:"<strong>Problem Title:</strong> Longest Substring Without Repeating Characters",id:"problem-title-longest-substring-without-repeating-characters",level:3},{value:"<strong>Difficulty:</strong> Medium",id:"difficulty-medium",level:3},{value:"<strong>Tags:</strong> String, Hash Table, Sliding Window",id:"tags-string-hash-table-sliding-window",level:3},{value:"<strong>Problem Statement:</strong>",id:"problem-statement",level:3},{value:"<strong>Explanation</strong>",id:"explanation",level:3},{value:"<strong>Time &amp; Space Complexity</strong>",id:"time--space-complexity",level:3},{value:"<strong>Solution</strong>",id:"solution",level:3},{value:"<strong>Solution Explanation</strong>",id:"solution-explanation",level:3},{value:"<strong>LeetCode Official Solutions</strong>",id:"leetcode-official-solutions",level:3}];function c(e){const t={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.h3,{id:"problem-title-longest-substring-without-repeating-characters",children:[(0,i.jsx)(t.strong,{children:"Problem Title:"})," Longest Substring Without Repeating Characters"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/longest-substring-without-repeating-characters",children:"https://leetcode.com/problems/longest-substring-without-repeating-characters"})}),"\n",(0,i.jsxs)(t.h3,{id:"difficulty-medium",children:[(0,i.jsx)(t.strong,{children:"Difficulty:"})," Medium"]}),"\n",(0,i.jsxs)(t.h3,{id:"tags-string-hash-table-sliding-window",children:[(0,i.jsx)(t.strong,{children:"Tags:"})," String, Hash Table, Sliding Window"]}),"\n",(0,i.jsx)(t.h3,{id:"problem-statement",children:(0,i.jsx)(t.strong,{children:"Problem Statement:"})}),"\n",(0,i.jsxs)(t.p,{children:["Given a string ",(0,i.jsx)(t.code,{children:"s"}),", find the length of the ",(0,i.jsx)(t.strong,{children:"longest substring"})," without repeating characters."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Example 1:"})}),"\n",(0,i.jsxs)(t.p,{children:["Input: ",(0,i.jsx)(t.code,{children:'s = "abcabcbb"'}),"\nOutput: ",(0,i.jsx)(t.code,{children:"3"}),'\nExplanation: The answer is "abc", with the length of 3.']}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Example 2:"})}),"\n",(0,i.jsxs)(t.p,{children:["Input: ",(0,i.jsx)(t.code,{children:'s = "bbbbb"'}),"\nOutput: ",(0,i.jsx)(t.code,{children:"1"}),'\nExplanation: The answer is "b", with the length of 1.']}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Example 3:"})}),"\n",(0,i.jsxs)(t.p,{children:["Input: ",(0,i.jsx)(t.code,{children:'s = "pwwkew"'}),"\nOutput: ",(0,i.jsx)(t.code,{children:"3"}),'\nExplanation: The answer is "wke", with the length of 3.']}),"\n",(0,i.jsx)(t.h3,{id:"explanation",children:(0,i.jsx)(t.strong,{children:"Explanation"})}),"\n",(0,i.jsx)(t.p,{children:"The problem asks for the length of the longest substring without repeating characters. We can solve this by using a sliding window approach and a hash table to keep track of the characters we have seen so far."}),"\n",(0,i.jsx)(t.h3,{id:"time--space-complexity",children:(0,i.jsx)(t.strong,{children:"Time & Space Complexity"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Time Complexity:"})," O(n), where n is the length of the string. This is because we are scanning the string once."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Space Complexity:"})," O(min(n, m)), where m is the size of the character set. This is because in the worst case, we might have to store all characters in the hash table."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"solution",children:(0,i.jsx)(t.strong,{children:"Solution"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-markdown",children:"## Solution\n```python\ndef lengthOfLongestSubstring(s: str) -> int:\n    char_set = set()\n    left = 0\n    max_length = 0\n    \n    for right in range(len(s)):\n        while s[right] in char_set:\n            char_set.remove(s[left])\n            left += 1\n        char_set.add(s[right])\n        max_length = max(max_length, right - left + 1)\n        \n    return max_length\n"})}),"\n",(0,i.jsx)(t.h3,{id:"solution-explanation",children:(0,i.jsx)(t.strong,{children:"Solution Explanation"})}),"\n",(0,i.jsxs)(t.p,{children:["The solution uses a sliding window approach with two pointers ",(0,i.jsx)(t.code,{children:"left"})," and ",(0,i.jsx)(t.code,{children:"right"}),". The ",(0,i.jsx)(t.code,{children:"right"})," pointer is used to expand the window, and the ",(0,i.jsx)(t.code,{children:"left"})," pointer is used to shrink the window when we encounter a repeating character."]}),"\n",(0,i.jsxs)(t.p,{children:["We use a hash table ",(0,i.jsx)(t.code,{children:"char_set"})," to keep track of the characters we have seen so far. When we encounter a repeating character, we remove the leftmost character from the hash table and move the ",(0,i.jsx)(t.code,{children:"left"})," pointer to the right."]}),"\n",(0,i.jsx)(t.p,{children:"The maximum length of the substring without repeating characters is updated whenever we find a longer substring."}),"\n",(0,i.jsx)(t.h3,{id:"leetcode-official-solutions",children:(0,i.jsx)(t.strong,{children:"LeetCode Official Solutions"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/longest-substring-without-repeating-characters/solution/",children:"Official LeetCode Solution"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);