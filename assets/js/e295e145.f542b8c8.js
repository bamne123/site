"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[8287],{5731:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"leetcode/Easy/Merge Sorted Array","title":"88 - Merge Sorted Array","description":"Problem Information","source":"@site/docs/leetcode/Easy/88-Merge Sorted Array.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Merge Sorted Array","permalink":"/site/docs/leetcode/Easy/Merge Sorted Array","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/88-Merge Sorted Array.md","tags":[],"version":"current","sidebarPosition":88,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"1 - Two Sum","permalink":"/site/docs/leetcode/Easy/Two Sum"},"next":{"title":"121 - Best Time to Buy and Sell Stock","permalink":"/site/docs/leetcode/Easy/Best Time to Buy and Sell Stock"}}');var t=r(4848),l=r(8453),i=r(5537),a=r(9329);const o={},c="88 - Merge Sorted Array",d={},u=[{value:"Problem Information",id:"problem-information",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Examples",id:"examples",level:3},{value:"Constraints",id:"constraints",level:3},{value:"Hints",id:"hints",level:3},{value:"Solution Approach",id:"solution-approach",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:3},{value:"Code Implementation",id:"code-implementation",level:3},{value:"Step-by-Step Explanation",id:"step-by-step-explanation",level:3},{value:"Alternative Approaches",id:"alternative-approaches",level:2},{value:"Common Mistakes and Pitfalls",id:"common-mistakes-and-pitfalls",level:2},{value:"Related Problems",id:"related-problems",level:2}];function m(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"88---merge-sorted-array",children:"88 - Merge Sorted Array"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-information",children:"Problem Information"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Difficulty:"})," Easy"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Category:"})," Array, Two Pointers, Sorting"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Link:"})," ",(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/merge-sorted-array/",children:"LeetCode"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["You are given two integer arrays ",(0,t.jsx)(n.code,{children:"nums1"})," and ",(0,t.jsx)(n.code,{children:"nums2"}),", sorted in non-decreasing order, and two integers ",(0,t.jsx)(n.code,{children:"m"})," and ",(0,t.jsx)(n.code,{children:"n"}),", representing the number of elements in ",(0,t.jsx)(n.code,{children:"nums1"})," and ",(0,t.jsx)(n.code,{children:"nums2"})," respectively."]}),"\n",(0,t.jsxs)(n.p,{children:["Merge ",(0,t.jsx)(n.code,{children:"nums1"})," and ",(0,t.jsx)(n.code,{children:"nums2"})," into a single array sorted in non-decreasing order."]}),"\n",(0,t.jsxs)(n.p,{children:["The final sorted array should not be returned by the function, but instead be ",(0,t.jsx)(n.em,{children:"stored inside the array"})," ",(0,t.jsx)(n.code,{children:"nums1"}),". To accommodate this, ",(0,t.jsx)(n.code,{children:"nums1"})," has a length of ",(0,t.jsx)(n.code,{children:"m + n"}),", where the first ",(0,t.jsx)(n.code,{children:"m"})," elements denote the elements that should be merged, and the last ",(0,t.jsx)(n.code,{children:"n"})," elements are set to ",(0,t.jsx)(n.code,{children:"0"})," and should be ignored. ",(0,t.jsx)(n.code,{children:"nums2"})," has a length of ",(0,t.jsx)(n.code,{children:"n"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(n.p,{children:["Input: ",(0,t.jsx)(n.code,{children:"nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3"}),"\nOutput: ",(0,t.jsx)(n.code,{children:"[1,2,2,3,5,6]"}),"\nExplanation: The arrays we are merging are ",(0,t.jsx)(n.code,{children:"[1,2,3]"})," and ",(0,t.jsx)(n.code,{children:"[2,5,6]"}),".\nThe result of the merge is ",(0,t.jsx)(n.code,{children:"[1,2,2,3,5,6]"})," with the underlined elements coming from ",(0,t.jsx)(n.code,{children:"nums1"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"constraints",children:"Constraints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"nums1.length == m + n"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"nums2.length == n"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"0 <= m, n <= 200"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= m + n <= 200"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"-10^9 <= nums1[i], nums2[j] <= 10^9"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"hints",children:"Hints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["You can avoid using extra space by performing the merge operation in-place, starting from the end of the array ",(0,t.jsx)(n.code,{children:"nums1"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,t.jsxs)(n.p,{children:["The problem requires us to merge two sorted arrays, ",(0,t.jsx)(n.code,{children:"nums1"})," and ",(0,t.jsx)(n.code,{children:"nums2"}),", into ",(0,t.jsx)(n.code,{children:"nums1"})," in a sorted manner. Since ",(0,t.jsx)(n.code,{children:"nums1"})," has enough space to accommodate all elements from both arrays, we can use a two-pointer approach, starting from the end of the arrays to avoid overwriting elements from ",(0,t.jsx)(n.code,{children:"nums1"})," that have not been merged yet. We compare the last elements of both arrays and place the larger one at the end of ",(0,t.jsx)(n.code,{children:"nums1"}),". We decrement the corresponding pointer and the index in ",(0,t.jsx)(n.code,{children:"nums1"})," where we placed the element. We repeat this process until one of the arrays is exhausted. Then, we copy the remaining elements from the other array into ",(0,t.jsx)(n.code,{children:"nums1"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Time Complexity:"})," O(m + n)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["We iterate through both arrays at most once, where ",(0,t.jsx)(n.code,{children:"m"})," is the number of elements in ",(0,t.jsx)(n.code,{children:"nums1"})," and ",(0,t.jsx)(n.code,{children:"n"})," is the number of elements in ",(0,t.jsx)(n.code,{children:"nums2"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Space Complexity:"})," O(1)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"We perform the merge in-place, using only a constant amount of extra space for pointers."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,t.jsxs)(i.A,{defaultValue:"python",groupId:"cody",values:[{label:"python",value:"python"},{label:"javascript",value:"javascript"},{label:"go",value:"go"},{label:"java",value:"java"},{label:"csharp",value:"csharp"}],children:[(0,t.jsx)(a.A,{value:"python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def merge(self, nums1: list[int], m: int, nums2: list[int], n: int) -> None:\n        """\n        Do not return anything, modify nums1 in-place instead.\n        """\n        p1 = m - 1\n        p2 = n - 1\n        p = m + n - 1\n\n        while p1 >= 0 and p2 >= 0:\n            if nums1[p1] > nums2[p2]:\n                nums1[p] = nums1[p1]\n                p1 -= 1\n            else:\n                nums1[p] = nums2[p2]\n                p2 -= 1\n            p -= 1\n\n        # Copy remaining elements from nums2 if any\n        while p2 >= 0:\n            nums1[p] = nums2[p2]\n            p2 -= 1\n            p -= 1\n'})})}),(0,t.jsx)(a.A,{value:"javascript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    let p1 = m - 1;\n    let p2 = n - 1;\n    let p = m + n - 1;\n\n    while (p1 >= 0 && p2 >= 0) {\n        if (nums1[p1] > nums2[p2]) {\n            nums1[p] = nums1[p1];\n            p1--;\n        } else {\n            nums1[p] = nums2[p2];\n            p2--;\n        }\n        p--;\n    }\n\n    // Copy remaining elements from nums2 if any\n    while (p2 >= 0) {\n        nums1[p] = nums2[p2];\n        p2--;\n        p--;\n    }\n};\n"})})}),(0,t.jsx)(a.A,{value:"go",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func merge(nums1 []int, m int, nums2 []int, n int)  {\n    p1 := m - 1\n    p2 := n - 1\n    p := m + n - 1\n\n    for p1 >= 0 && p2 >= 0 {\n        if nums1[p1] > nums2[p2] {\n            nums1[p] = nums1[p1]\n            p1--\n        } else {\n            nums1[p] = nums2[p2]\n            p2--\n        }\n        p--\n    }\n\n    // Copy remaining elements from nums2 if any\n    for p2 >= 0 {\n        nums1[p] = nums2[p2]\n        p2--\n        p--\n    }\n}\n"})})}),(0,t.jsx)(a.A,{value:"java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int p1 = m - 1;\n        int p2 = n - 1;\n        int p = m + n - 1;\n\n        while (p1 >= 0 && p2 >= 0) {\n            if (nums1[p1] > nums2[p2]) {\n                nums1[p] = nums1[p1];\n                p1--;\n            } else {\n                nums1[p] = nums2[p2];\n                p2--;\n            }\n            p--;\n        }\n\n        // Copy remaining elements from nums2 if any\n        while (p2 >= 0) {\n            nums1[p] = nums2[p2];\n            p2--;\n            p--;\n        }\n    }\n}\n"})})}),(0,t.jsx)(a.A,{value:"csharp",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class Solution {\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\n        int p1 = m - 1;\n        int p2 = n - 1;\n        int p = m + n - 1;\n\n        while (p1 >= 0 && p2 >= 0) {\n            if (nums1[p1] > nums2[p2]) {\n                nums1[p] = nums1[p1];\n                p1--;\n            } else {\n                nums1[p] = nums2[p2];\n                p2--;\n            }\n            p--;\n        }\n\n        // Copy remaining elements from nums2 if any\n        while (p2 >= 0) {\n            nums1[p] = nums2[p2];\n            p2--;\n            p--;\n        }\n    }\n}\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"step-by-step-explanation",children:"Step-by-Step Explanation"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Initialize three pointers: ",(0,t.jsx)(n.code,{children:"p1"})," pointing to the last element of ",(0,t.jsx)(n.code,{children:"nums1"})," (up to index ",(0,t.jsx)(n.code,{children:"m-1"}),"), ",(0,t.jsx)(n.code,{children:"p2"})," pointing to the last element of ",(0,t.jsx)(n.code,{children:"nums2"})," (up to index ",(0,t.jsx)(n.code,{children:"n-1"}),"), and ",(0,t.jsx)(n.code,{children:"p"})," pointing to the last position in ",(0,t.jsx)(n.code,{children:"nums1"})," where the merged element will be placed (index ",(0,t.jsx)(n.code,{children:"m+n-1"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["While ",(0,t.jsx)(n.code,{children:"p1"})," and ",(0,t.jsx)(n.code,{children:"p2"})," are both within the bounds of their respective arrays, compare the elements at ",(0,t.jsx)(n.code,{children:"nums1[p1]"})," and ",(0,t.jsx)(n.code,{children:"nums2[p2]"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Place the larger of the two elements at ",(0,t.jsx)(n.code,{children:"nums1[p]"})," and decrement the corresponding pointer (",(0,t.jsx)(n.code,{children:"p1"})," or ",(0,t.jsx)(n.code,{children:"p2"}),") and ",(0,t.jsx)(n.code,{children:"p"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["After the loop, if there are any remaining elements in ",(0,t.jsx)(n.code,{children:"nums2"}),", copy them to the beginning of ",(0,t.jsx)(n.code,{children:"nums1"}),". There is no need to copy remaining elements from ",(0,t.jsx)(n.code,{children:"nums1"})," because they are already in the correct place."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"alternative-approaches",children:"Alternative Approaches"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Using Extra Space"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a new array of size ",(0,t.jsx)(n.code,{children:"m + n"}),", merge the elements from ",(0,t.jsx)(n.code,{children:"nums1"})," and ",(0,t.jsx)(n.code,{children:"nums2"})," into the new array, and then copy the elements back to ",(0,t.jsx)(n.code,{children:"nums1"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Time Complexity: O(m + n)"}),"\n",(0,t.jsx)(n.li,{children:"Space Complexity: O(m + n)"}),"\n",(0,t.jsx)(n.li,{children:"Trade-offs: Uses extra space, but the implementation is simpler."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-mistakes-and-pitfalls",children:"Common Mistakes and Pitfalls"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Not handling the case where one of the arrays is completely processed before the other. Make sure to copy the remaining elements from the other array if needed."}),"\n",(0,t.jsxs)(n.li,{children:["Incorrectly initializing the pointers. Make sure ",(0,t.jsx)(n.code,{children:"p1"})," and ",(0,t.jsx)(n.code,{children:"p2"})," start at the last valid indices of the arrays being merged."]}),"\n",(0,t.jsxs)(n.li,{children:["Overwriting elements in ",(0,t.jsx)(n.code,{children:"nums1"})," before they are processed if starting from the beginning of the arrays instead of the end."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-problems",children:"Related Problems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/remove-element/",children:"Remove Element"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/sort-colors/",children:"Sort Colors"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},9329:(e,n,r)=>{r.d(n,{A:()=>i});r(6540);var s=r(4164);const t={tabItem:"tabItem_Ymn6"};var l=r(4848);function i(e){let{children:n,hidden:r,className:i}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,i),hidden:r,children:n})}},5537:(e,n,r)=>{r.d(n,{A:()=>w});var s=r(6540),t=r(4164),l=r(5627),i=r(6347),a=r(372),o=r(604),c=r(1861),d=r(8749);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:r}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:s,default:t}}=e;return{value:n,label:r,attributes:s,default:t}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function h(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:r}=e;const t=(0,i.W6)(),l=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,o.aZ)(l),(0,s.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(t.location.search);n.set(l,e),t.replace({...t.location,search:n.toString()})}),[l,t])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:t}=e,l=m(e),[i,o]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=r.find((e=>e.default))??r[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:l}))),[c,u]=p({queryString:r,groupId:t}),[x,j]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,l]=(0,d.Dv)(r);return[t,(0,s.useCallback)((e=>{r&&l.set(e)}),[r,l])]}({groupId:t}),f=(()=>{const e=c??x;return h({value:e,tabValues:l})?e:null})();(0,a.A)((()=>{f&&o(f)}),[f]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!h({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),j(e)}),[u,j,l]),tabValues:l}}var j=r(9136);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=r(4848);function b(e){let{className:n,block:r,selectedValue:s,selectValue:i,tabValues:a}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.a_)(),d=e=>{const n=e.currentTarget,r=o.indexOf(n),t=a[r].value;t!==s&&(c(n),i(t))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;n=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;n=o[r]??o[o.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":r},n),children:a.map((e=>{let{value:n,label:r,attributes:l}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{o.push(e)},onKeyDown:u,onClick:d,...l,className:(0,t.A)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":s===n}),children:r??n},n)}))})}function y(e){let{lazy:n,children:r,selectedValue:l}=e;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===l));return e?(0,s.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function v(e){const n=x(e);return(0,g.jsxs)("div",{className:(0,t.A)("tabs-container",f.tabList),children:[(0,g.jsx)(b,{...n,...e}),(0,g.jsx)(y,{...n,...e})]})}function w(e){const n=(0,j.A)();return(0,g.jsx)(v,{...e,children:u(e.children)},String(n))}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const t={},l=s.createContext(t);function i(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);