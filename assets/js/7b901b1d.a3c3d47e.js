"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[4501],{6939:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"leetcode/Easy/Squares of a Sorted Array","title":"977 - Squares of a Sorted Array","description":"Problem Information","source":"@site/docs/leetcode/Easy/977-Squares of a Sorted Array.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Squares of a Sorted Array","permalink":"/site/docs/leetcode/Easy/Squares of a Sorted Array","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/977-Squares of a Sorted Array.md","tags":[],"version":"current","sidebarPosition":977,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"283 - Move Zeroes","permalink":"/site/docs/leetcode/Easy/Move Zeroes"},"next":{"title":"Median of Two Sorted Arrays","permalink":"/site/docs/leetcode/Hard/Median of Two Sorted Arrays"}}');var s=t(4848),a=t(8453),l=t(5537),i=t(9329);const o={},c="977 - Squares of a Sorted Array",u={},d=[{value:"Problem Information",id:"problem-information",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Examples",id:"examples",level:3},{value:"Constraints",id:"constraints",level:3},{value:"Hints",id:"hints",level:3},{value:"Solution Approach",id:"solution-approach",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:3},{value:"Code Implementation",id:"code-implementation",level:3},{value:"Step-by-Step Explanation",id:"step-by-step-explanation",level:3},{value:"Alternative Approaches",id:"alternative-approaches",level:2},{value:"Common Mistakes and Pitfalls",id:"common-mistakes-and-pitfalls",level:2},{value:"Related Problems",id:"related-problems",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"977---squares-of-a-sorted-array",children:"977 - Squares of a Sorted Array"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-information",children:"Problem Information"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Difficulty:"})," Easy"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Category:"})," Array, Two Pointers, Sorting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Link:"})," ",(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/squares-of-a-sorted-array",children:"LeetCode"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(n.p,{children:["Given an integer array ",(0,s.jsx)(n.code,{children:"nums"})," sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order."]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(n.p,{children:["Input: ",(0,s.jsx)(n.code,{children:"nums = [-4,-1,0,3,10]"}),"\nOutput: ",(0,s.jsx)(n.code,{children:"[0,1,9,16,100]"}),"\nExplanation: After squaring, the array becomes ",(0,s.jsx)(n.code,{children:"[16,1,0,9,100]"}),". After sorting, it becomes ",(0,s.jsx)(n.code,{children:"[0,1,9,16,100]"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"constraints",children:"Constraints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= nums.length <= 10^4"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"-10^4 <= nums[i] <= 10^4"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nums"})," is sorted in non-decreasing order."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"hints",children:"Hints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Try thinking about the output array negatively."}),"\n",(0,s.jsxs)(n.li,{children:["Use the ",(0,s.jsx)(n.code,{children:"two pointers"})," approach."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,s.jsx)(n.p,{children:"The problem requires us to square each element of a sorted array and then sort the squared elements in non-decreasing order. A naive approach would be to square each element and then use a sorting algorithm. However, since the input array is already sorted, we can use a two-pointer approach to achieve a more efficient solution. We can use two pointers, one at the beginning and one at the end of the array. We compare the absolute values of the elements pointed to by these pointers. The element with the larger absolute value will have the larger square. We place the square of this element at the end of the result array and move the corresponding pointer inwards. We repeat this process until both pointers meet."}),"\n",(0,s.jsx)(n.h3,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Time Complexity:"})," O(n)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"We iterate through the array once using two pointers."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Space Complexity:"})," O(n)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"We create a new array of the same size to store the squared and sorted values."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,s.jsxs)(l.A,{defaultValue:"python",groupId:"cody",values:[{label:"python",value:"python"},{label:"javascript",value:"javascript"},{label:"go",value:"go"},{label:"java",value:"java"},{label:"csharp",value:"csharp"}],children:[(0,s.jsx)(i.A,{value:"python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def sortedSquares(nums):\n    n = len(nums)\n    result = [0] * n\n    left, right = 0, n - 1\n    for i in range(n - 1, -1, -1):\n        if abs(nums[left]) > abs(nums[right]):\n            result[i] = nums[left] ** 2\n            left += 1\n        else:\n            result[i] = nums[right] ** 2\n            right -= 1\n    return result\n"})})}),(0,s.jsx)(i.A,{value:"javascript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function sortedSquares(nums) {\n    const n = nums.length;\n    const result = new Array(n);\n    let left = 0;\n    let right = n - 1;\n    for (let i = n - 1; i >= 0; i--) {\n        if (Math.abs(nums[left]) > Math.abs(nums[right])) {\n            result[i] = nums[left] ** 2;\n            left++;\n        } else {\n            result[i] = nums[right] ** 2;\n            right--;\n        }\n    }\n    return result;\n}\n"})})}),(0,s.jsx)(i.A,{value:"go",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"func sortedSquares(nums []int) []int {\n    n := len(nums)\n    result := make([]int, n)\n    left, right := 0, n-1\n    for i := n-1; i >= 0; i-- {\n        if abs(nums[left]) > abs(nums[right]) {\n            result[i] = nums[left] * nums[left]\n            left++\n        } else {\n            result[i] = nums[right] * nums[right]\n            right--\n        }\n    }\n    return result\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n"})})}),(0,s.jsx)(i.A,{value:"java",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int[] sortedSquares(int[] nums) {\n        int n = nums.length;\n        int[] result = new int[n];\n        int left = 0;\n        int right = n - 1;\n        for (int i = n - 1; i >= 0; i--) {\n            if (Math.abs(nums[left]) > Math.abs(nums[right])) {\n                result[i] = nums[left] * nums[left];\n                left++;\n            } else {\n                result[i] = nums[right] * nums[right];\n                right--;\n            }\n        }\n        return result;\n    }\n}\n"})})}),(0,s.jsx)(i.A,{value:"csharp",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class Solution {\n    public int[] SortedSquares(int[] nums) {\n        int n = nums.Length;\n        int[] result = new int[n];\n        int left = 0;\n        int right = n - 1;\n        for (int i = n - 1; i >= 0; i--) {\n            if (Math.Abs(nums[left]) > Math.Abs(nums[right])) {\n                result[i] = nums[left] * nums[left];\n                left++;\n            } else {\n                result[i] = nums[right] * nums[right];\n                right--;\n            }\n        }\n        return result;\n    }\n}\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"step-by-step-explanation",children:"Step-by-Step Explanation"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Initialize two pointers, ",(0,s.jsx)(n.code,{children:"left"})," and ",(0,s.jsx)(n.code,{children:"right"}),", to the start and end of the input array, respectively."]}),"\n",(0,s.jsxs)(n.li,{children:["Create a new array ",(0,s.jsx)(n.code,{children:"result"})," of the same size as the input array to store the squared and sorted values."]}),"\n",(0,s.jsxs)(n.li,{children:["Iterate from the end of the ",(0,s.jsx)(n.code,{children:"result"})," array to the beginning."]}),"\n",(0,s.jsxs)(n.li,{children:["In each iteration, compare the absolute values of the elements pointed to by the ",(0,s.jsx)(n.code,{children:"left"})," and ",(0,s.jsx)(n.code,{children:"right"})," pointers."]}),"\n",(0,s.jsxs)(n.li,{children:["Place the square of the element with the larger absolute value at the current position in the ",(0,s.jsx)(n.code,{children:"result"})," array."]}),"\n",(0,s.jsx)(n.li,{children:"Move the corresponding pointer inwards."}),"\n",(0,s.jsxs)(n.li,{children:["Repeat steps 4-6 until the ",(0,s.jsx)(n.code,{children:"left"})," and ",(0,s.jsx)(n.code,{children:"right"})," pointers meet."]}),"\n",(0,s.jsxs)(n.li,{children:["Return the ",(0,s.jsx)(n.code,{children:"result"})," array."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"alternative-approaches",children:"Alternative Approaches"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Naive Approach"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Square each element in the array and then sort the resulting array."}),"\n",(0,s.jsx)(n.li,{children:"Time Complexity: O(n log n)"}),"\n",(0,s.jsx)(n.li,{children:"Space Complexity: O(1) if sorting is done in-place, O(n) otherwise."}),"\n",(0,s.jsx)(n.li,{children:"Trade-offs: Simpler to implement, but less efficient than the two-pointer approach."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Using ",(0,s.jsx)(n.code,{children:"sorted"})," function in Python"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Square each element in the array and use python's ",(0,s.jsx)(n.code,{children:"sorted"})," function."]}),"\n",(0,s.jsx)(n.li,{children:"Time Complexity: O(n log n)"}),"\n",(0,s.jsx)(n.li,{children:"Space Complexity: O(n)"}),"\n",(0,s.jsx)(n.li,{children:"Trade-offs: concise, but less efficient."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-mistakes-and-pitfalls",children:"Common Mistakes and Pitfalls"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Forgetting to handle negative numbers correctly."}),"\n",(0,s.jsx)(n.li,{children:"Not using the two-pointer approach when the input array is already sorted."}),"\n",(0,s.jsx)(n.li,{children:"Not squaring the values before comparing them."}),"\n",(0,s.jsx)(n.li,{children:"Incorrectly placing the squared values in the result array."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-problems",children:"Related Problems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/merge-sorted-array/",children:"Merge Sorted Array"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/sort-colors/",children:"Sort Colors"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},9329:(e,n,t)=>{t.d(n,{A:()=>l});t(6540);var r=t(4164);const s={tabItem:"tabItem_Ymn6"};var a=t(4848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,l),hidden:t,children:n})}},5537:(e,n,t)=>{t.d(n,{A:()=>S});var r=t(6540),s=t(4164),a=t(5627),l=t(6347),i=t(372),o=t(604),c=t(1861),u=t(8749);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,l.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(s.location.search);n.set(a,e),s.replace({...s.location,search:n.toString()})}),[a,s])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,a=h(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[c,d]=m({queryString:t,groupId:s}),[f,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,a]=(0,u.Dv)(t);return[s,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:s}),j=(()=>{const e=c??f;return p({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{j&&o(j)}),[j]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),x(e)}),[d,x,a]),tabValues:a}}var x=t(9136);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(4848);function b(e){let{className:n,block:t,selectedValue:r,selectValue:l,tabValues:i}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),u=e=>{const n=e.currentTarget,t=o.indexOf(n),s=i[t].value;s!==r&&(c(n),l(s))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>{o.push(e)},onKeyDown:d,onClick:u,...a,className:(0,s.A)("tabs__item",j.tabItem,a?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function y(e){const n=f(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",j.tabList),children:[(0,g.jsx)(b,{...n,...e}),(0,g.jsx)(v,{...n,...e})]})}function S(e){const n=(0,x.A)();return(0,g.jsx)(y,{...e,children:d(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var r=t(6540);const s={},a=r.createContext(s);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);