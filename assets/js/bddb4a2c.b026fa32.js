"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[8567],{8830:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"leetcode/Easy/Two Sum","title":"Two Sum","description":"Problem Title: Two Sum","source":"@site/docs/leetcode/Easy/Two Sum.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Two Sum","permalink":"/site/docs/leetcode/Easy/Two Sum","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/Two Sum.md","tags":[],"version":"current","frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Welcome","permalink":"/site/docs/leetcode/sytem-design/intro"},"next":{"title":"Problem Title: 3 Sum Problem","permalink":"/site/docs/leetcode/test"}}');var i=n(4848),s=n(8453);const r={},l=void 0,a={},c=[{value:"<strong>Problem Title:</strong> Two Sum",id:"problem-title-two-sum",level:3},{value:"Explanation",id:"explanation",level:2},{value:"Time &amp; Space Complexity",id:"time--space-complexity",level:2},{value:"Solution",id:"solution",level:2},{value:"Solution Explanation",id:"solution-explanation",level:2},{value:"LeetCode Official Solutions",id:"leetcode-official-solutions",level:2}];function d(e){const t={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.h3,{id:"problem-title-two-sum",children:[(0,i.jsx)(t.strong,{children:"Problem Title:"})," ",(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/two-sum",children:"Two Sum"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Difficulty:"})," Easy"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Tags:"})," Array, Hash Table"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Problem Statement:"}),(0,i.jsx)(t.br,{}),"\n","Given an array of integers ",(0,i.jsx)(t.code,{children:"nums"})," and an integer ",(0,i.jsx)(t.code,{children:"target"}),", return indices of the two numbers such that they add up to ",(0,i.jsx)(t.code,{children:"target"}),". You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order."]}),"\n",(0,i.jsx)(t.p,{children:"Example 1:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Input: nums = [2, 7, 11, 15], target = 9\nOutput: [0, 1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n"})}),"\n",(0,i.jsx)(t.h2,{id:"explanation",children:"Explanation"}),"\n",(0,i.jsxs)(t.p,{children:["The problem is asking to find two numbers in an array that add up to a given target. We are given an array of integers ",(0,i.jsx)(t.code,{children:"nums"})," and an integer ",(0,i.jsx)(t.code,{children:"target"}),", and we need to return the indices of the two numbers that add up to ",(0,i.jsx)(t.code,{children:"target"}),". The key constraint here is that we cannot use the same element twice."]}),"\n",(0,i.jsx)(t.h2,{id:"time--space-complexity",children:"Time & Space Complexity"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Time Complexity:"})," O(n)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Space Complexity:"})," O(n)"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"def twoSum(nums, target):\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return None\n"})}),"\n",(0,i.jsx)(t.h2,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,i.jsxs)(t.p,{children:["This solution uses a hash table ",(0,i.jsx)(t.code,{children:"num_dict"})," to store the numbers we have seen so far and their indices. We iterate through the array, and for each number, we check if its complement (i.e., ",(0,i.jsx)(t.code,{children:"target - num"}),") is in the hash table. If it is, we have found the two numbers that add up to ",(0,i.jsx)(t.code,{children:"target"}),", and we return their indices. If not, we add the current number and its index to the hash table and continue iterating."]}),"\n",(0,i.jsx)(t.h2,{id:"leetcode-official-solutions",children:"LeetCode Official Solutions"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/two-sum/solution/",children:"Official LeetCode Solution"})}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Note: The above solution is one possible solution, and there may be other solutions with different time and space complexities."})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var o=n(6540);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);