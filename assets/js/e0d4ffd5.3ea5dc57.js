"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[6445],{834:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"leetcode/Hard/Regular Expression Matching","title":"Regular Expression Matching","description":"Regular Expression Matching","source":"@site/docs/leetcode/Hard/10-Regular Expression Matching.md","sourceDirName":"leetcode/Hard","slug":"/leetcode/Hard/Regular Expression Matching","permalink":"/site/docs/leetcode/Hard/Regular Expression Matching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Hard/10-Regular Expression Matching.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Median of Two Sorted Arrays","permalink":"/site/docs/leetcode/Hard/Median of Two Sorted Arrays"},"next":{"title":"Add Two Numbers","permalink":"/site/docs/leetcode/Medium/Add Two Numbers"}}');var a=n(4848),i=n(8453);const s={},c=void 0,o={},h=[{value:"Regular Expression Matching",id:"regular-expression-matching",level:2},{value:"Problem Information",id:"problem-information",level:3},{value:"Solution Approach",id:"solution-approach",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"regular-expression-matching",children:"Regular Expression Matching"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Problem Statement"}),"\nGiven a text string and a pattern string, determine if the text matches the pattern."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Example"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'Input: s = "ababa", p = "ababa"\nOutput: true\nExplanation: The string "ababa" matches the pattern "ababa".\n'})}),"\n",(0,a.jsx)(t.h3,{id:"problem-information",children:"Problem Information"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Difficulty:"})," Hard"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Category:"})," String Matching, Regular Expressions"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Companies:"})," Known companies that frequently ask this"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Link:"})," ",(0,a.jsx)(t.a,{href:"https://leetcode.com/problems/regular-expression-matching",children:"https://leetcode.com/problems/regular-expression-matching"})]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Overview"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"This solution uses a backtracking approach to match the pattern with the text string."}),"\n",(0,a.jsx)(t.li,{children:"It iterates over the text string and checks if the current character matches the first character of the pattern."}),"\n",(0,a.jsx)(t.li,{children:"If it does, it recursively calls the solution for the remaining characters in the pattern and the text string."}),"\n",(0,a.jsx)(t.li,{children:"If it doesn't, it backtracks and tries the next character in the pattern."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Implementation"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"def isMatch(s: str, p: str) -> bool:\nif not p:  # If pattern is empty, it matches the text if the text is not empty\nreturn len(s) > 0"}),"\n",(0,a.jsx)(t.p,{children:"if len(s) == 0:  # If text is empty, it matches if the pattern is not empty\nreturn False"}),"\n",(0,a.jsx)(t.p,{children:"last_match = p[0] == s[0]  # Last matching character of pattern and text\npunct = p[1] == '.'  # Punctuation mark"}),"\n",(0,a.jsx)(t.p,{children:"return isMatch(s[1:], p[1:]) or (last_match and punct and isMatch(s[1:], p[2:]))"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"\n### Complexity Analysis\n\n-   Time Complexity: O(2^n), where n is the length of the pattern.\n-   Space Complexity: O(n), for the maximum recursion depth and the stack.\n\n### Explanation\n\n1.  **Base Case**\n    *   If the pattern or the text is empty, it matches if the text is not empty, and vice versa.\n2.  **Recursive Case**\n    *   If the current character in the text matches the first character of the pattern, it recursively calls the function for the remaining characters in the pattern and the text.\n    *   If it doesn't, it backtracks and tries the next character in the pattern.\n3.  **Backtracking**\n    *   It uses backtracking to try different characters in the pattern and see if they match the text.\n\n### Step-by-Step Explanation\n\n1.  **Initialization**\n    *   Initialize the last matching character of the pattern and text, and the punctuation mark.\n2.  **Base Case**\n    *   If the pattern or the text is empty, it matches if the text is not empty, and vice versa.\n3.  **Recursive Case**\n    *   If the current character in the text matches the first character of the pattern, it recursively calls the function for the remaining characters in the pattern and the text.\n    *   If it doesn't, it backtracks and tries the next character in the pattern.\n4.  **Backtracking**\n    *   It uses backtracking to try different characters in the pattern and see if they match the text.\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(6540);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);