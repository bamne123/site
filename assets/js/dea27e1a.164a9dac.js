"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[8741],{9957:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"leetcode/Easy/Intersection of Two Arrays","title":"349 - Intersection of Two Arrays","description":"Problem Information","source":"@site/docs/leetcode/Easy/349-Intersection of Two Arrays.md","sourceDirName":"leetcode/Easy","slug":"/leetcode/Easy/Intersection of Two Arrays","permalink":"/site/docs/leetcode/Easy/Intersection of Two Arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Easy/349-Intersection of Two Arrays.md","tags":[],"version":"current","sidebarPosition":349,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"283 - Move Zeroes","permalink":"/site/docs/leetcode/Easy/Move Zeroes"},"next":{"title":"350 - Intersection of Two Arrays II","permalink":"/site/docs/leetcode/Easy/Intersection of Two Arrays II"}}');var r=t(4848),l=t(8453),a=t(5537),i=t(9329);const o={},c="349 - Intersection of Two Arrays",h={},u=[{value:"Problem Information",id:"problem-information",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Solution Approach",id:"solution-approach",level:2},{value:"Complexity Analysis",id:"complexity-analysis",level:3},{value:"Code Implementation",id:"code-implementation",level:3},{value:"Step-by-Step Explanation",id:"step-by-step-explanation",level:3},{value:"Alternative Approaches",id:"alternative-approaches",level:2},{value:"Common Mistakes and Pitfalls",id:"common-mistakes-and-pitfalls",level:2},{value:"Related Problems",id:"related-problems",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"349---intersection-of-two-arrays",children:"349 - Intersection of Two Arrays"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-information",children:"Problem Information"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Difficulty:"})," Easy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Category:"})," Array, Hash Table, Two Pointers, Binary Search, Sorting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Link:"})," ",(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/intersection-of-two-arrays/",children:"LeetCode"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)("p",{children:["Given two integer arrays ",(0,r.jsx)("code",{children:"nums1"})," and ",(0,r.jsx)("code",{children:"nums2"}),", return ",(0,r.jsxs)("em",{children:["an array of their ",(0,r.jsx)("span",{"data-keyword":"array-intersection",children:"intersection"})]}),". Each element in the result must be ",(0,r.jsx)("strong",{children:"unique"})," and you may return the result in ",(0,r.jsx)("strong",{children:"any order"}),"."]}),"\n",(0,r.jsx)("p",{children:"\xa0"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("strong",{class:"example",children:"Example 1:"})}),"\n",(0,r.jsx)("pre",{children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)("strong",{children:"Input:"})," nums1 = [1,2,2,1], nums2 = [2,2]\n",(0,r.jsx)("strong",{children:"Output:"})," [2]"]})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("strong",{class:"example",children:"Example 2:"})}),"\n",(0,r.jsx)("pre",{children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)("strong",{children:"Input:"})," nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n",(0,r.jsx)("strong",{children:"Output:"})," [9,4]\n",(0,r.jsx)("strong",{children:"Explanation:"})," [4,9] is also accepted."]})}),"\n",(0,r.jsx)("p",{children:"\xa0"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("strong",{children:"Constraints:"})}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)("code",{children:"1 <= nums1.length, nums2.length <= 1000"})}),(0,r.jsx)("li",{children:(0,r.jsx)("code",{children:"0 <= nums1[i], nums2[i] <= 1000"})})]}),"\n",(0,r.jsx)(n.h2,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,r.jsx)(n.p,{children:"We can use a hash table to efficiently find the intersection of two arrays."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create a hash table:"})," Iterate through the ",(0,r.jsx)(n.code,{children:"nums1"})," array and store each element as a key in the hash table with a value of 1. This indicates that the element is present in ",(0,r.jsx)(n.code,{children:"nums1"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Iterate through ",(0,r.jsx)(n.code,{children:"nums2"}),":"]})," For each element in ",(0,r.jsx)(n.code,{children:"nums2"}),", check if it exists as a key in the hash table."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add to result:"})," If the element exists in the hash table, it's an intersection element. Add it to the result array."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Video Explanation:"})}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/fwUTXaMom6U",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),"\n",(0,r.jsx)(n.h3,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Time Complexity:"})," O(n + m) where n is the length of ",(0,r.jsx)(n.code,{children:"nums1"})," and m is the length of ",(0,r.jsx)(n.code,{children:"nums2"}),". We iterate through both arrays once."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Space Complexity:"})," O(n) in the worst case, where all elements of ",(0,r.jsx)(n.code,{children:"nums1"})," are unique and are added to the hash table."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,r.jsxs)(a.A,{defaultValue:"python",groupId:"cody",values:[{label:"Python",value:"python"},{label:"JavaScript",value:"javascript"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"Go",value:"go"}],children:[(0,r.jsx)(i.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def intersect(nums1, nums2):\n    hash_table = {}\n    result = []\n    for num in nums1:\n        if num in hash_table:\n            hash_table[num] += 1\n        else:\n            hash_table[num] = 1\n\n    for num in nums2:\n        if num in hash_table and hash_table[num] > 0:\n            result.append(num)\n            hash_table[num] -= 1\n    return result\n"})})}),(0,r.jsx)(i.A,{value:"javascript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function intersect(nums1, nums2) {\n  const hashTable = {};\n  const result = [];\n  for (const num of nums1) {\n    if (num in hashTable) {\n      hashTable[num]++;\n    } else {\n      hashTable[num] = 1;\n    }\n  }\n  for (const num of nums2) {\n    if (num in hashTable && hashTable[num] > 0) {\n      result.push(num);\n      hashTable[num]--;\n    }\n  }\n  return result;\n}\n"})})}),(0,r.jsx)(i.A,{value:"java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int[] intersect(int[] nums1, int[] nums2) {\n        Map<Integer, Integer> hashTable = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (int num : nums1) {\n            if (hashTable.containsKey(num)) {\n                hashTable.put(num, hashTable.get(num) + 1);\n            } else {\n                hashTable.put(num, 1);\n            }\n        }\n        for (int num : nums2) {\n            if (hashTable.containsKey(num) && hashTable.get(num) > 0) {\n                result.add(num);\n                hashTable.put(num, hashTable.get(num) - 1);\n            }\n        }\n        int[] resultArray = new int[result.size()];\n        for (int i = 0; i < result.size(); i++) {\n            resultArray[i] = result.get(i);\n        }\n        return resultArray;\n    }\n}\n"})})}),(0,r.jsx)(i.A,{value:"csharp",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class Solution {\n    public int[] Intersect(int[] nums1, int[] nums2) {\n        Dictionary<int, int> hashTable = new Dictionary<int, int>();\n        List<int> result = new List<int>();\n        foreach (int num in nums1) {\n            if (hashTable.ContainsKey(num)) {\n                hashTable[num]++;\n            } else {\n                hashTable[num] = 1;\n            }\n        }\n        foreach (int num in nums2) {\n            if (hashTable.ContainsKey(num) && hashTable[num] > 0) {\n                result.Add(num);\n                hashTable[num]--;\n            }\n        }\n        return result.ToArray();\n    }\n}\n"})})}),(0,r.jsx)(i.A,{value:"go",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func intersect(nums1 []int, nums2 []int) []int {\n    hashTable := make(map[int]int)\n    result := []int{}\n    for _, num := range nums1 {\n        if _, ok := hashTable[num]; ok {\n            hashTable[num]++\n        } else {\n            hashTable[num] = 1\n        }\n    }\n    for _, num := range nums2 {\n        if _, ok := hashTable[num]; ok && hashTable[num] > 0 {\n            result = append(result, num)\n            hashTable[num]--\n        }\n    }\n    return result\n}\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"step-by-step-explanation",children:"Step-by-Step Explanation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create an empty hash table ",(0,r.jsx)(n.code,{children:"hashTable"})," to store the elements of ",(0,r.jsx)(n.code,{children:"nums1"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Iterate through ",(0,r.jsx)(n.code,{children:"nums1"})," and for each element ",(0,r.jsx)(n.code,{children:"num"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"num"})," is already in ",(0,r.jsx)(n.code,{children:"hashTable"}),", increment its count."]}),"\n",(0,r.jsxs)(n.li,{children:["Otherwise, add ",(0,r.jsx)(n.code,{children:"num"})," to ",(0,r.jsx)(n.code,{children:"hashTable"})," with a count of 1."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Iterate through ",(0,r.jsx)(n.code,{children:"nums2"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For each element ",(0,r.jsx)(n.code,{children:"num"})," in ",(0,r.jsx)(n.code,{children:"nums2"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"num"})," exists in ",(0,r.jsx)(n.code,{children:"hashTable"})," and its count is greater than 0:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Append ",(0,r.jsx)(n.code,{children:"num"})," to the ",(0,r.jsx)(n.code,{children:"result"})," array."]}),"\n",(0,r.jsxs)(n.li,{children:["Decrement the count of ",(0,r.jsx)(n.code,{children:"num"})," in ",(0,r.jsx)(n.code,{children:"hashTable"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Return the ",(0,r.jsx)(n.code,{children:"result"})," array."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"alternative-approaches",children:"Alternative Approaches"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Sorting:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sort both arrays."}),"\n",(0,r.jsx)(n.li,{children:"Iterate through the arrays simultaneously, comparing elements."}),"\n",(0,r.jsx)(n.li,{children:"If elements are equal, add them to the result and advance both pointers."}),"\n",(0,r.jsx)(n.li,{children:"Time Complexity: O(n log n + m log m) for sorting"}),"\n",(0,r.jsx)(n.li,{children:"Space Complexity: O(1)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Two Pointers:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use two pointers, one for each array."}),"\n",(0,r.jsx)(n.li,{children:"Advance the pointers based on the comparison of elements."}),"\n",(0,r.jsx)(n.li,{children:"If elements are equal, add them to the result and advance both pointers."}),"\n",(0,r.jsx)(n.li,{children:"Time Complexity: O(n + m)"}),"\n",(0,r.jsx)(n.li,{children:"Space Complexity: O(1)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-mistakes-and-pitfalls",children:"Common Mistakes and Pitfalls"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not handling duplicates correctly:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure that the intersection elements are unique and only added once to the result array."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Forgetting to decrement counts in the hash table:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When adding an element to the result, decrement its count in the hash table to avoid adding it multiple times."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Incorrectly handling empty arrays:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Consider edge cases where one or both arrays are empty."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-problems",children:"Related Problems"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/contains-duplicate/",children:"https://leetcode.com/problems/contains-duplicate/"})," - Contains Duplicate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/single-number-ii/",children:"https://leetcode.com/problems/single-number-ii/"})," - Single Number II"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},9329:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var s=t(4164);const r={tabItem:"tabItem_Ymn6"};var l=t(4848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,a),hidden:t,children:n})}},5537:(e,n,t)=>{t.d(n,{A:()=>T});var s=t(6540),r=t(4164),l=t(5627),a=t(6347),i=t(372),o=t(604),c=t(1861),h=t(8749);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:r}}=e;return{value:n,label:t,attributes:s,default:r}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const r=(0,a.W6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(l),(0,s.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(r.location.search);n.set(l,e),r.replace({...r.location,search:n.toString()})}),[l,r])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,l=d(e),[a,o]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:l}))),[c,u]=p({queryString:t,groupId:r}),[x,j]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,l]=(0,h.Dv)(t);return[r,(0,s.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:r}),b=(()=>{const e=c??x;return m({value:e,tabValues:l})?e:null})();(0,i.A)((()=>{b&&o(b)}),[b]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),j(e)}),[u,j,l]),tabValues:l}}var j=t(9136);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(4848);function y(e){let{className:n,block:t,selectedValue:s,selectValue:a,tabValues:i}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.a_)(),h=e=>{const n=e.currentTarget,t=o.indexOf(n),r=i[t].value;r!==s&&(c(n),a(r))},u=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:l}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{o.push(e)},onKeyDown:u,onClick:h,...l,className:(0,r.A)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function g(e){let{lazy:n,children:t,selectedValue:l}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===l));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function v(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",b.tabList),children:[(0,f.jsx)(y,{...n,...e}),(0,f.jsx)(g,{...n,...e})]})}function T(e){const n=(0,j.A)();return(0,f.jsx)(v,{...e,children:u(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(6540);const r={},l=s.createContext(r);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);