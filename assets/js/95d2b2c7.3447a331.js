"use strict";(self.webpackChunkmy_stie=self.webpackChunkmy_stie||[]).push([[5501],{1273:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"leetcode/Medium/Add Two Numbers","title":"Add Two Numbers","description":"Add Two Numbers","source":"@site/docs/leetcode/Medium/2-Add Two Numbers.md","sourceDirName":"leetcode/Medium","slug":"/leetcode/Medium/Add Two Numbers","permalink":"/site/docs/leetcode/Medium/Add Two Numbers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/Medium/2-Add Two Numbers.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"leetcodeSidebar","previous":{"title":"Regular Expression Matching","permalink":"/site/docs/leetcode/Hard/Regular Expression Matching"},"next":{"title":"Longest Substring Without Repeating Characters","permalink":"/site/docs/leetcode/Medium/Longest Substring Without Repeating Characters"}}');var t=i(4848),l=i(8453);const d={},r=void 0,o={},a=[{value:"Add Two Numbers",id:"add-two-numbers",level:3},{value:"Problem Information",id:"problem-information",level:4},{value:"Problem Statement",id:"problem-statement",level:4},{value:"Examples",id:"examples",level:4},{value:"Constraints",id:"constraints",level:4},{value:"Solution Approach",id:"solution-approach",level:4},{value:"Complexity Analysis",id:"complexity-analysis",level:4},{value:"Code Implementation",id:"code-implementation",level:4},{value:"Step-by-Step Explanation",id:"step-by-step-explanation",level:4},{value:"Alternative Approaches",id:"alternative-approaches",level:4},{value:"Common Mistakes and Pitfalls",id:"common-mistakes-and-pitfalls",level:4},{value:"Related Problems",id:"related-problems",level:4}];function c(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"add-two-numbers",children:"Add Two Numbers"}),"\n",(0,t.jsx)(n.h4,{id:"problem-information",children:"Problem Information"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Difficulty:"})," Medium"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Category:"})," Linked List, Math, Recursion"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Companies:"})," Known companies that frequently ask this"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Link:"})," ",(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/add-two-numbers",children:"LeetCode"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Companies:"})," LeetCode"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Level:"})," Beginner"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["Given two non-negative integers ",(0,t.jsx)(n.code,{children:"num1"})," and ",(0,t.jsx)(n.code,{children:"num2"})," representing non-negative integers, compute their sum without using the + operator."]}),"\n",(0,t.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: num1 = 2, num2 = 3\nOutput: 5\nExplanation: 2 + 3 = 5\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: num1 = 4, num2 = 6\nOutput: 10\nExplanation: 4 + 6 = 10\n"})}),"\n",(0,t.jsx)(n.h4,{id:"constraints",children:"Constraints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Input Types:"})," Both ",(0,t.jsx)(n.code,{children:"num1"})," and ",(0,t.jsx)(n.code,{children:"num2"})," are non-negative integers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Output Type:"})," The sum of ",(0,t.jsx)(n.code,{children:"num1"})," and ",(0,t.jsx)(n.code,{children:"num2"})," without using the + operator"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a new linked list with two nodes ",(0,t.jsx)(n.code,{children:"head"})," and a dummy node ",(0,t.jsx)(n.code,{children:"dummy"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Initialize ",(0,t.jsx)(n.code,{children:"head"})," as ",(0,t.jsx)(n.code,{children:"dummy"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Iterate through ",(0,t.jsx)(n.code,{children:"num1"})," and ",(0,t.jsx)(n.code,{children:"num2"})," from the start, and update the values of ",(0,t.jsx)(n.code,{children:"head"})," and ",(0,t.jsx)(n.code,{children:"dummy"})," as needed."]}),"\n",(0,t.jsxs)(n.li,{children:["When the end of ",(0,t.jsx)(n.code,{children:"num1"})," is reached, append ",(0,t.jsx)(n.code,{children:"dummy"})," to ",(0,t.jsx)(n.code,{children:"head"})," and update ",(0,t.jsx)(n.code,{children:"head"})," as the new ",(0,t.jsx)(n.code,{children:"head"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["When the end of ",(0,t.jsx)(n.code,{children:"num2"})," is reached, append ",(0,t.jsx)(n.code,{children:"dummy"})," to ",(0,t.jsx)(n.code,{children:"head"})," and update ",(0,t.jsx)(n.code,{children:"head"})," as the new ",(0,t.jsx)(n.code,{children:"head"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["After the loop, if ",(0,t.jsx)(n.code,{children:"num1"})," is not empty, append ",(0,t.jsx)(n.code,{children:"dummy"})," to ",(0,t.jsx)(n.code,{children:"head"})," and update ",(0,t.jsx)(n.code,{children:"head"})," as the new ",(0,t.jsx)(n.code,{children:"head"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["When the end of ",(0,t.jsx)(n.code,{children:"num2"})," is reached, append ",(0,t.jsx)(n.code,{children:"dummy"})," to ",(0,t.jsx)(n.code,{children:"head"})," and update ",(0,t.jsx)(n.code,{children:"head"})," as the new ",(0,t.jsx)(n.code,{children:"head"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Time Complexity:"})," O(max(m, n))","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Time complexity of the entire solution is O(max(m, n)), where m and n are the lengths of ",(0,t.jsx)(n.code,{children:"num1"})," and ",(0,t.jsx)(n.code,{children:"num2"}),", respectively."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Space Complexity:"})," O(max(m, n))","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Space complexity of the solution is O(max(m, n))."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, num1, num2):\n        dummy = ListNode()\n        current = dummy\n        carry = 0\n        while num1 or num2 or carry:\n            x = num1.val if num1 else 0\n            y = num2.val if num2 else 0\n            sum = carry + x + y\n            carry = sum // 10\n            current.next = ListNode(sum % 10)\n            current = current.next\n            if num1:\n                num1 = num1.next\n            if num2:\n                num2 = num2.next\n        return dummy.next\n"})}),"\n",(0,t.jsx)(n.h4,{id:"step-by-step-explanation",children:"Step-by-Step Explanation"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Create a new linked list with a dummy node."}),"\n",(0,t.jsxs)(n.li,{children:["Initialize ",(0,t.jsx)(n.code,{children:"dummy"})," as the dummy node and ",(0,t.jsx)(n.code,{children:"carry"})," as 0."]}),"\n",(0,t.jsxs)(n.li,{children:["While ",(0,t.jsx)(n.code,{children:"num1"})," is not empty, ",(0,t.jsx)(n.code,{children:"num2"})," is not empty, or there is a carry, start the iteration:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Get the values of ",(0,t.jsx)(n.code,{children:"num1"})," and ",(0,t.jsx)(n.code,{children:"num2"})," using their current values (if any)."]}),"\n",(0,t.jsxs)(n.li,{children:["Calculate the sum of ",(0,t.jsx)(n.code,{children:"num1"})," and ",(0,t.jsx)(n.code,{children:"num2"})," using the carry value."]}),"\n",(0,t.jsx)(n.li,{children:"Set the carry value to the sum divided by 10."}),"\n",(0,t.jsxs)(n.li,{children:["Create a new node with the sum modulo 10 using ",(0,t.jsx)(n.code,{children:"carry"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Update the next pointer of the dummy node to the new node."}),"\n",(0,t.jsxs)(n.li,{children:["Move to the next node by updating ",(0,t.jsx)(n.code,{children:"current"})," to the next node."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Return the next node of the dummy node, which is the head of the linked list."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"alternative-approaches",children:"Alternative Approaches"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Recursive Approach:"})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use a recursive function to solve the problem."}),"\n",(0,t.jsxs)(n.li,{children:["In each recursive call, calculate the sum of ",(0,t.jsx)(n.code,{children:"num1"})," and ",(0,t.jsx)(n.code,{children:"num2"}),", update the carry value, and recursively call the function until ",(0,t.jsx)(n.code,{children:"num1"})," is empty, ",(0,t.jsx)(n.code,{children:"num2"})," is empty, or there is no carry."]}),"\n",(0,t.jsx)(n.li,{children:"Combine the code using a stack data structure to avoid repeated computations."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Iterative Approach:"})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use an iterative approach to solve the problem."}),"\n",(0,t.jsx)(n.li,{children:"Initialize a carry value to 0."}),"\n",(0,t.jsxs)(n.li,{children:["Iterate through ",(0,t.jsx)(n.code,{children:"num1"})," and ",(0,t.jsx)(n.code,{children:"num2"})," using two pointers, one for ",(0,t.jsx)(n.code,{children:"num1"})," and one for ",(0,t.jsx)(n.code,{children:"num2"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["In each iteration, calculate the sum of ",(0,t.jsx)(n.code,{children:"num1"})," and ",(0,t.jsx)(n.code,{children:"num2"}),", update the carry value, and move both pointers."]}),"\n",(0,t.jsx)(n.li,{children:"After the iteration, return the head of the linked list."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"common-mistakes-and-pitfalls",children:"Common Mistakes and Pitfalls"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Memory Allocation:"})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Make sure to allocate memory for the linked list and the dummy node."}),"\n",(0,t.jsx)(n.li,{children:"Use a stack data structure to avoid repeated computations."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Error Handling:"})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handle edge cases such as an empty input or an invalid input."}),"\n",(0,t.jsx)(n.li,{children:"Return a default value or a specific error message for invalid inputs."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"related-problems",children:"Related Problems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/add-two-numbers-ii",children:"Add Two Numbers II"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/add-three-numbers",children:"Add Three Numbers"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'\n#### Response Guidelines\n\n1.  **Validation Rules:**\n   - All sections must be properly formatted\n   - Code blocks must specify the language\n   - Links must be properly formatted and valid\n   - Examples must include input, output, and explanation\n   - Constraints must be clearly listed\n\n2.  **Error Handling:**\n   - If problem not found: "Unable to find LeetCode problem ${reference}. Please verify the problem number or title."\n   - If invalid input: "Please provide a valid LeetCode problem reference."\n   - If missing solution: Include placeholder text "Solution not provided"\n\n3.  **Quality Checks:**\n   - Ensure all code examples are properly indented\n   - Verify all mathematical notations are correct\n   - Confirm complexity analysis is accurate and explained\n   - Validate all markdown formatting\n\n4.  **Special Cases:**\n   - For premium problems: Note that detailed solution cannot be provided\n   - For contest problems: Include contest number and date\n   - For new problems: Note if it\'s from an ongoing contest\n\n#### Style Guidelines\n\n1.  **Code Formatting:**\n   - Use consistent indentation (2 spaces)\n   - Include meaningful variable names\n   - Add inline comments for complex logic\n   - Follow language-specific best practices\n\n2.  **Explanation Style:**\n   - Use clear, concise language\n   - Include relevant diagrams when helpful\n   - Break down complex concepts into steps\n   - Provide intuition behind the solution\n\n3.  **Complexity Analysis:**\n   - Explain both best and worst cases\n   - Include space complexity for all variables\n   - Explain any amortized complexity\n   - Note any specific input dependencies\n\n#### End Response\n\nAlways include a footer with:\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Generated by LeetCode Documentation Assistant\nLast Updated: 2023-12-15"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"This will provide the current date and help users track changes to the documentation.\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>r});var s=i(6540);const t={},l=s.createContext(t);function d(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);